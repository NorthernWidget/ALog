<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="Logger_8cpp" kind="file" language="C++">
    <compoundname>Logger.cpp</compoundname>
    <includes refid="Logger_8h" local="no">Logger.h</includes>
    <incdepgraph>
      <node id="7">
        <label>DS3231.h</label>
      </node>
      <node id="2">
        <label>Logger.cpp</label>
        <link refid="Logger_8cpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>avr/wdt.h</label>
      </node>
      <node id="3">
        <label>Logger.h</label>
        <link refid="Logger_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Wire.h</label>
      </node>
      <node id="9">
        <label>avr/sleep.h</label>
      </node>
      <node id="5">
        <label>SdFat.h</label>
      </node>
      <node id="8">
        <label>math.h</label>
      </node>
      <node id="4">
        <label>Arduino.h</label>
      </node>
      <node id="14">
        <label>SFE_BMP180.h</label>
      </node>
      <node id="13">
        <label>SoftwareSerial.h</label>
      </node>
      <node id="12">
        <label>EEPROM.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="Logger_8cpp_1ae70baf5399951da1e7ad45a0ed890832" prot="public" static="no">
        <name>cbi</name>
        <param><defname>sfr</defname></param>
        <param><defname>bit</defname></param>
        <initializer>(_SFR_BYTE(sfr) &amp;= ~_BV(bit))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="356" column="11"/>
      </memberdef>
      <memberdef kind="define" id="Logger_8cpp_1ac4a5536d9bf092116f88b94797ddc882" prot="public" static="no">
        <name>sbi</name>
        <param><defname>sfr</defname></param>
        <param><defname>bit</defname></param>
        <initializer>(_SFR_BYTE(sfr) |= _BV(bit))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="359" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="Logger_8cpp_1a82b81447a86ec4d16506a446ead2d959" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int bottle_logger</definition>
        <argsstring></argsstring>
        <name>bottle_logger</name>
        <initializer>=0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="61" column="1" bodyfile="Logger.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a6e587b3167201135d66e618bc4e9d6eb" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int big_log</definition>
        <argsstring></argsstring>
        <name>big_log</name>
        <initializer>=1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="62" column="1" bodyfile="Logger.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1aa77c5809820d08b6b9906e4d5cc5c282" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int log_mega</definition>
        <argsstring></argsstring>
        <name>log_mega</name>
        <initializer>=2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="63" column="1" bodyfile="Logger.cpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1aac8b4ff3c3a72eabbce5302c6a62b674" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int SCKpin</definition>
        <argsstring></argsstring>
        <name>SCKpin</name>
        <initializer>= 13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="91" column="1" bodyfile="Logger.cpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a89a5801f20cfb155fbae7a349e70da2a" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int MISOpin</definition>
        <argsstring></argsstring>
        <name>MISOpin</name>
        <initializer>= 12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="92" column="1" bodyfile="Logger.cpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a7e790e9a217d45f2a6d85379bef6baad" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int MOSIpin</definition>
        <argsstring></argsstring>
        <name>MOSIpin</name>
        <initializer>= 11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="93" column="1" bodyfile="Logger.cpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a99da311d248bcae3ed3e157271f257a2" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int CSpin</definition>
        <argsstring></argsstring>
        <name>CSpin</name>
        <initializer>= 10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="94" column="1" bodyfile="Logger.cpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a3e30838b685431b8951ec64dadf77804" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int SDApin</definition>
        <argsstring></argsstring>
        <name>SDApin</name>
        <initializer>= A4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="96" column="1" bodyfile="Logger.cpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1ad73f03b48a5c4f2b5dc2b5baf2b8e11a" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int SCLpin</definition>
        <argsstring></argsstring>
        <name>SCLpin</name>
        <initializer>= A5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="97" column="1" bodyfile="Logger.cpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1aac01d19cf572390930779f0cccb7e32d" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int SensorPowerPin</definition>
        <argsstring></argsstring>
        <name>SensorPowerPin</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="99" column="1" bodyfile="Logger.cpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a273294c2c60fa9968084103809f483c3" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int SDpowerPin</definition>
        <argsstring></argsstring>
        <name>SDpowerPin</name>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="107" column="1" bodyfile="Logger.cpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a59aa6300313960491e43e02f7aa48bc4" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int ClockPowerPin</definition>
        <argsstring></argsstring>
        <name>ClockPowerPin</name>
        <initializer>= 6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="108" column="1" bodyfile="Logger.cpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a82504a11fb254521fd47f38bc9140370" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int LEDpin</definition>
        <argsstring></argsstring>
        <name>LEDpin</name>
        <initializer>= 9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="109" column="1" bodyfile="Logger.cpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1ad48994183e177d334acf26db183b4c02" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int wakePin</definition>
        <argsstring></argsstring>
        <name>wakePin</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="111" column="1" bodyfile="Logger.cpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1aa7fe2f17315370b6970682d6e886a39a" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int interruptNum</definition>
        <argsstring></argsstring>
        <name>interruptNum</name>
        <initializer>= wakePin-2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="112" column="1" bodyfile="Logger.cpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a3b3aee00057d1c0000acb96c8a1ae039" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int manualWakePin</definition>
        <argsstring></argsstring>
        <name>manualWakePin</name>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="113" column="1" bodyfile="Logger.cpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a9301505418340f46ed372ed9f8f883c4" prot="public" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool h12</definition>
        <argsstring></argsstring>
        <name>h12</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="134" column="1" bodyfile="Logger.cpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1ab77f56a33b8532217ce48f0b1245b612" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int hourInterval</definition>
        <argsstring></argsstring>
        <name>hourInterval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="142" column="1" bodyfile="Logger.cpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a02b6432e3c27c53a8dec52bdb89e727d" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int minInterval</definition>
        <argsstring></argsstring>
        <name>minInterval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="143" column="1" bodyfile="Logger.cpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a3f8ea935eb97b1591ba876e9b9f5696c" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int secInterval</definition>
        <argsstring></argsstring>
        <name>secInterval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="144" column="1" bodyfile="Logger.cpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1ae9e72989946d1faad54881543c608cd0" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int _hours</definition>
        <argsstring></argsstring>
        <name>_hours</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="146" column="1" bodyfile="Logger.cpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1aa8cbf9c20655f9f019790baf6a71e073" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int _minutes</definition>
        <argsstring></argsstring>
        <name>_minutes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="147" column="1" bodyfile="Logger.cpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a7084691e96b1daa3a2d70def71aaf1d9" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int _seconds</definition>
        <argsstring></argsstring>
        <name>_seconds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="148" column="1" bodyfile="Logger.cpp" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a68393fac7d89166dd2dcfb912a1719d3" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _use_sleep_mode</definition>
        <argsstring></argsstring>
        <name>_use_sleep_mode</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="151" column="1" bodyfile="Logger.cpp" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a708f1306493fcf4780f4b3fee9913ca4" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool CAMERA_IS_ON</definition>
        <argsstring></argsstring>
        <name>CAMERA_IS_ON</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="153" column="1" bodyfile="Logger.cpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1adf875ef298ce84c624410441199174a7" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool IS_LOGGING</definition>
        <argsstring></argsstring>
        <name>IS_LOGGING</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="158" column="1" bodyfile="Logger.cpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a5a8d6447b18910d1430e93745ab59648" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* datafilename</definition>
        <argsstring></argsstring>
        <name>datafilename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="163" column="1" bodyfile="Logger.cpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a0ac67755b34868235cbf497710a5f3c4" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* logger_name</definition>
        <argsstring></argsstring>
        <name>logger_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="164" column="1" bodyfile="Logger.cpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a8ba3a8d681fc12076bc941ab2dfe11aa" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool extInt</definition>
        <argsstring></argsstring>
        <name>extInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="167" column="1" bodyfile="Logger.cpp" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1aac008d9b5fb23b399e3d3acfcf598355" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool NEW_RAIN_BUCKET_TIP</definition>
        <argsstring></argsstring>
        <name>NEW_RAIN_BUCKET_TIP</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="168" column="1" bodyfile="Logger.cpp" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a3907b2190de8be0458e0ba44d05aadd5" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool LOG_ALL_SENSORS_ON_BUCKET_TIP</definition>
        <argsstring></argsstring>
        <name>LOG_ALL_SENSORS_ON_BUCKET_TIP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="169" column="1" bodyfile="Logger.cpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1aa02918371030d65b08d974c07d39ee38" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool first_log_after_booting_up</definition>
        <argsstring></argsstring>
        <name>first_log_after_booting_up</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="178" column="1" bodyfile="Logger.cpp" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a0ece0ecf78205e2187d9bd98896e6121" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int rotation_count</definition>
        <argsstring></argsstring>
        <name>rotation_count</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="181" column="1" bodyfile="Logger.cpp" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a65da607d8fc2158dfe99dc25bd7f0a93" prot="public" static="no" mutable="no">
        <type>RTClib</type>
        <definition>RTClib RTC</definition>
        <argsstring></argsstring>
        <name>RTC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="198" column="1" bodyfile="Logger.cpp" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a3a6ff5c7ec928df3cd8c33fb3a263bdf" prot="public" static="no" mutable="no">
        <type>DS3231</type>
        <definition>DS3231 Clock</definition>
        <argsstring></argsstring>
        <name>Clock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="199" column="1" bodyfile="Logger.cpp" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a15e6b7e1f0fb2d1e0fe1654721bb5302" prot="public" static="no" mutable="no">
        <type>SdFat</type>
        <definition>SdFat sd</definition>
        <argsstring></argsstring>
        <name>sd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="202" column="1" bodyfile="Logger.cpp" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a1115547a6eea844c4f66793a4f7d6329" prot="public" static="no" mutable="no">
        <type>SdFile</type>
        <definition>SdFile datafile</definition>
        <argsstring></argsstring>
        <name>datafile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="203" column="1" bodyfile="Logger.cpp" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1abf344448e6a83213262a3d1b902b192f" prot="public" static="no" mutable="no">
        <type>SdFile</type>
        <definition>SdFile otherfile</definition>
        <argsstring></argsstring>
        <name>otherfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="204" column="1" bodyfile="Logger.cpp" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1a2297cfd57d84dc9445398dcdbf2ca53f" prot="public" static="no" mutable="no">
        <type>SdFile</type>
        <definition>SdFile headerfile</definition>
        <argsstring></argsstring>
        <name>headerfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="206" column="1" bodyfile="Logger.cpp" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Logger_8cpp_1ac023874b2154eac7297a7575008605fe" prot="public" static="no" mutable="no">
        <type>DateTime</type>
        <definition>DateTime now</definition>
        <argsstring></argsstring>
        <name>now</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="211" column="1" bodyfile="Logger.cpp" bodystart="211" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Logger_8cpp_1adee29828901ea1b4f99ce305fa3e17bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wakeUpNow</definition>
        <argsstring>()</argsstring>
        <name>wakeUpNow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="700" column="1" bodyfile="Logger.cpp" bodystart="700" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="Logger_8cpp_1a1a3b380e75d68eef4c3913816773e1b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wakeUpNow_tip</definition>
        <argsstring>()</argsstring>
        <name>wakeUpNow_tip</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="713" column="1" bodyfile="Logger.cpp" bodystart="713" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="Logger_8cpp_1a9c215a00c214c880d04481d256d8d522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ISR_void</definition>
        <argsstring>()</argsstring>
        <name>_ISR_void</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="2787" column="1" bodyfile="Logger.cpp" bodystart="2787" bodyend="2788"/>
      </memberdef>
      <memberdef kind="function" id="Logger_8cpp_1aa2e4ccb5b638347db4da535aac7ac209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _anemometer_count_increment</definition>
        <argsstring>()</argsstring>
        <name>_anemometer_count_increment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="2790" column="1" bodyfile="Logger.cpp" bodystart="2790" bodyend="2795"/>
      </memberdef>
      <memberdef kind="function" id="Logger_8cpp_1a144189fccfe80979cc2fcafefdf2728a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void save_Aref</definition>
        <argsstring>(float _V)</argsstring>
        <name>save_Aref</name>
        <param>
          <type>float</type>
          <declname>_V</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Saves a float as the reference voltage for the ADC (&quot;Vref&quot;) to the EEPROM</para><para>ADC == analog-digital comparator EEPROM = permanent memory (persists after shutdown) See: <ulink url="https://www.arduino.cc/en/Reference/EEPROMPut">https://www.arduino.cc/en/Reference/EEPROMPut</ulink></para><para>This function is only called rarely, as this value is typically measured only once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_V</parametername>
</parameternamelist>
<parameterdescription>
<para>reference voltage, ideally measured under load [V]</para></parameterdescription>
</parameteritem>
</parameterlist>
Example: <programlisting><codeline><highlight class="normal">//<sp/>Measuring<sp/>3.297V<sp/>with<sp/>a<sp/>calibrated<sp/>multimeter<sp/>between<sp/>3V3<sp/>and<sp/>GND</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Then:</highlight></codeline>
<codeline><highlight class="normal">logger.saveAref(3.297);</highlight></codeline>
</programlisting></para>        </inbodydescription>
        <location file="Logger.cpp" line="3498" column="1" bodyfile="Logger.cpp" bodystart="3498" bodyend="3522"/>
      </memberdef>
      <memberdef kind="function" id="Logger_8cpp_1ae9bf4d0d2809a902be80dbf825844636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float read_Aref</definition>
        <argsstring>()</argsstring>
        <name>read_Aref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Read the analog (ADC) sensor reference voltage from EEPROM, return float.</para><para>ADC == analog-digital comparator EEPROM = permanent memory (persists after shutdown) See: <ulink url="https://www.arduino.cc/en/Reference/EEPROMGet">https://www.arduino.cc/en/Reference/EEPROMGet</ulink></para><para>Example: <programlisting><codeline><highlight class="normal">float<sp/>Vref;</highlight></codeline>
<codeline><highlight class="normal">Vref<sp/>=<sp/>logger.readAref();</highlight></codeline>
</programlisting></para>        </inbodydescription>
        <location file="Logger.cpp" line="3524" column="1" bodyfile="Logger.cpp" bodystart="3524" bodyend="3544"/>
      </memberdef>
      <memberdef kind="function" id="Logger_8cpp_1a7551515cf6f018df3d8d942710936aef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _internalDateTime</definition>
        <argsstring>(uint16_t *date, uint16_t *time)</argsstring>
        <name>_internalDateTime</name>
        <param>
          <type>uint16_t *</type>
          <declname>date</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Logger.cpp" line="3864" column="1" bodyfile="Logger.cpp" bodystart="3864" bodyend="3870"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Data logger library Designed for the ALog Modules should work for any Arduino-based board with minimal modificiation Goals: (1) Manage logger utility functions, largely behind-the-scenes (2) Simplify data logger operations to one-line calls</para><para>Written by Andy Wickert, 2011-2017, and Chad Sandell, 2016-2017 Started 27 September 2011</para><para>Designed to greatly simplify Arduino sketches for the ALog and reduce what the end user needs to do into relatively simple one-line calls.</para><para><heading level="1">LICENSE: GNU GPL v3</heading>
</para><para><ref refid="Logger_8cpp" kindref="compound">Logger.cpp</ref> is part of <ref refid="classLogger" kindref="compound">Logger</ref>, an Arduino library written by Andrew D. Wickert and Chad T. Sandell Copyright (C) 2011-2017, Andrew D. Wickert Copyright (C) 2016-2017, Andrew D. Wickert and Chad T. Sandell Copyright (C) 2016-2017, Regents of the University of Minnesota</para><para>This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</para><para>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</para><para>You should have received a copy of the GNU General Public License along with this program. If not, see <ulink url="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</ulink>. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="40"><highlight class="comment">//<sp/>INCLUDE<sp/>HEADER<sp/>FILE<sp/>AND<sp/>ITS<sp/>INCLUDED<sp/>LIBRARIES<sp/>//</highlight></codeline>
<codeline lineno="43"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Logger_8h" kindref="compound">Logger.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Breaking<sp/>things<sp/>up<sp/>at<sp/>first,<sp/>but<sp/>will<sp/>try<sp/>to<sp/>just<sp/>put<sp/>all<sp/>of<sp/>the<sp/>initialize<sp/>/<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>setup<sp/>stuff<sp/>in<sp/>the<sp/>constructor<sp/>eventually<sp/>(or<sp/>maybe<sp/>just<sp/>lump<sp/>&quot;initialize&quot;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>&quot;setup&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">//<sp/>STATIC<sp/>MEMBERS<sp/>OF<sp/>CLASS,<sp/>SO<sp/>ACCESSIBLE<sp/>ANYWHERE<sp/>//</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MAYBE<sp/>PUT<sp/>UNDERSCORES<sp/>BEFORE<sp/>ALL<sp/>OF<sp/>THESE<sp/>VARS,<sp/>IF<sp/>I<sp/>THINK<sp/>THERE<sp/>IS<sp/>RISK<sp/>OF<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RE-DEFINING<sp/>THEM<sp/>IN<sp/>SKETCH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DEFINE<sp/>BOARD<sp/>BASED<sp/>ON<sp/>MCU<sp/>TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>First,<sp/>give<sp/>integer<sp/>values<sp/>to<sp/>the<sp/>different<sp/>board<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottle_logger=0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>big_log=1;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log_mega=2;<sp/></highlight><highlight class="comment">//<sp/>In<sp/>development</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Then<sp/>define<sp/>_model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Now<sp/>taking<sp/>advantage<sp/>of<sp/>the<sp/>build.board<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Keeping<sp/>in<sp/>MCU<sp/>definitions<sp/>for<sp/>backwards<sp/>compatibility...<sp/>will<sp/>eventually<sp/>throw<sp/>a<sp/>deprecation<sp/>error<sp/>with<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WILL<sp/>HAVE<sp/>TO<sp/>UPDATE<sp/>THIS<sp/>--<sp/>UNIFORMLY<sp/>THROUGHOUT<sp/>CODE.<sp/>START<sp/>HERE!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ARDUINO_AVR_ALOG_BOTTLELOGGER_PRE_V200)<sp/>||<sp/>defined(ARDUINO_AVR_ALOG_BOTTLELOGGER_V2)<sp/>||<sp/>defined(__AVR_ATmega168__)<sp/>||<sp/>defined(__AVR_ATmega328P__)<sp/>||<sp/>defined(__AVR_ATmega8__)<sp/>||<sp/>defined(__AVR_ATmega88__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_model<sp/>=<sp/>bottle_logger;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>_model_name[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bottle_logger&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="73"><highlight class="comment">#elif<sp/>defined(__AVR_ATmega644__)<sp/>||<sp/>defined(__AVR_ATmega644P__)</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>_model<sp/>=<sp/>big_log;</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/>const<sp/>char<sp/>_model_name[]<sp/>=<sp/>&quot;big_log&quot;;</highlight></codeline>
<codeline lineno="76"><highlight class="comment">#elif<sp/>defined(__AVR_ATmega1280__)<sp/>||<sp/>defined(__AVR_ATmega2560__)</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>_model<sp/>=<sp/>log_mega;</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/>const<sp/>char<sp/>_model_name[]<sp/>=<sp/>&quot;log_mega&quot;;</highlight></codeline>
<codeline lineno="79"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DECLARE<sp/>PINS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Should<sp/>do<sp/>the<sp/>full<sp/>declaration<sp/>here<sp/>with<sp/>some<sp/>&quot;if&apos;s&quot;<sp/>so<sp/>I<sp/>can<sp/>do<sp/>&quot;const<sp/>int&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="comment">//<sp/>ASSIGN<sp/>PINS<sp/>//</highlight></codeline>
<codeline lineno="88"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#if(_model<sp/>==<sp/>bottle_logger)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>card:<sp/>CSpin<sp/>and<sp/>protected<sp/>pins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SCKpin<sp/>=<sp/>13;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MISOpin<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MOSIpin<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CSpin<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Protected<sp/>I2C<sp/>pins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SDApin<sp/>=<sp/>A4;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SCLpin<sp/>=<sp/>A5;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Digital<sp/>pins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SensorPowerPin<sp/>=<sp/>4;<sp/></highlight><highlight class="comment">//<sp/>Activates<sp/>voltage<sp/>regulator<sp/>to<sp/>give<sp/>power<sp/>to<sp/>sensors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined(ARDUINO_AVR_ALOG_BOTTLELOGGER_V2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>7<sp/>for<sp/>both???<sp/>START<sp/>HERE!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SDpowerPin<sp/>=<sp/>7;<sp/></highlight><highlight class="comment">//<sp/>Turns<sp/>on<sp/>voltage<sp/>source<sp/>to<sp/>SD<sp/>card</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ClockPowerPin<sp/>=<sp/>7;<sp/></highlight><highlight class="comment">//<sp/>Activates<sp/>voltage<sp/>regulator<sp/>to<sp/>power<sp/>the<sp/>RTC<sp/>(otherwise<sp/>is<sp/>on<sp/>backup<sp/>power<sp/>from<sp/>VCC<sp/>or<sp/>batt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LEDpin<sp/>=<sp/>8;<sp/></highlight><highlight class="comment">//<sp/>LED<sp/>to<sp/>tell<sp/>user<sp/>if<sp/>logger<sp/>is<sp/>working<sp/>properly<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IS<sp/>IT<sp/>EVEN<sp/>TRUE<sp/>HERE<sp/>THAT<sp/>THERE<sp/>ARE<sp/>MULTIPLE<sp/>PINS<sp/>USED<sp/>FOR<sp/>SD<sp/>AND<sp/>CLOCK?<sp/>START<sp/>HERE!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SDpowerPin<sp/>=<sp/>8;<sp/></highlight><highlight class="comment">//<sp/>Turns<sp/>on<sp/>voltage<sp/>source<sp/>to<sp/>SD<sp/>card</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ClockPowerPin<sp/>=<sp/>6;<sp/></highlight><highlight class="comment">//<sp/>Activates<sp/>voltage<sp/>regulator<sp/>to<sp/>power<sp/>the<sp/>RTC<sp/>(otherwise<sp/>is<sp/>on<sp/>backup<sp/>power<sp/>from<sp/>VCC<sp/>or<sp/>batt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LEDpin<sp/>=<sp/>9;<sp/></highlight><highlight class="comment">//<sp/>LED<sp/>to<sp/>tell<sp/>user<sp/>if<sp/>logger<sp/>is<sp/>working<sp/>properly<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wakePin<sp/>=<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>interrupt<sp/>pin<sp/>used<sp/>for<sp/>waking<sp/>up<sp/>via<sp/>the<sp/>alarm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interruptNum<sp/>=<sp/>wakePin-2;<sp/></highlight><highlight class="comment">//<sp/>=0<sp/>for<sp/>pin<sp/>2,<sp/>1<sp/>for<sp/>pin<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>manualWakePin<sp/>=<sp/>5;<sp/></highlight><highlight class="comment">//<sp/>Wakes<sp/>the<sp/>logger<sp/>with<sp/>a<sp/>manual<sp/>button<sp/>-<sp/>overrides<sp/>the<sp/>&quot;wait<sp/>for<sp/>right<sp/>minute&quot;<sp/>commands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="115"><highlight class="comment">#elif(_model<sp/>==<sp/>big_log)</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/>//<sp/>SD<sp/>card:<sp/>CSpin<sp/>and<sp/>protected<sp/>pins</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>SCKpin<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>MISOpin<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>MOSIpin<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>CSpin<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/>//<sp/>Protected<sp/>I2C<sp/>pins</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>SDApin<sp/>=<sp/>23;</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>SCLpin<sp/>=<sp/>22;</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/>//<sp/>Digital<sp/>pins</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>SensorPowerPin<sp/>=<sp/>21;<sp/>//<sp/>Activates<sp/>voltage<sp/>regulator<sp/>to<sp/>give<sp/>power<sp/>to<sp/>sensors</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>SDpowerPin<sp/>=<sp/>22;<sp/>//<sp/>Turns<sp/>on<sp/>voltage<sp/>source<sp/>to<sp/>SD<sp/>card</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>LEDpin<sp/>=<sp/>23;<sp/>//<sp/>LED<sp/>to<sp/>tell<sp/>user<sp/>if<sp/>logger<sp/>is<sp/>working<sp/>properly</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>wakePin<sp/>=<sp/>10;<sp/>//<sp/>interrupt<sp/>pin<sp/>used<sp/>for<sp/>waking<sp/>up<sp/>via<sp/>the<sp/>alarm</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>interruptNum<sp/>=<sp/>0;<sp/>//<sp/>=0<sp/>for<sp/>pin<sp/>2,<sp/>1<sp/>for<sp/>pin<sp/>3</highlight></codeline>
<codeline lineno="130"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clock<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>h12<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="comment">//<sp/>GLOBAL<sp/>VARIABLES<sp/>DEFINED<sp/>IN<sp/>INITIALIZE<sp/>STEP<sp/>//</highlight></codeline>
<codeline lineno="139"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Logging<sp/>interval<sp/>-<sp/>wake<sp/>when<sp/>minutes<sp/>==<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//int<sp/>log_minutes;<sp/>//**chad<sp/>delete<sp/>when<sp/>new<sp/>alarm<sp/>works</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hourInterval;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minInterval;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secInterval;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Alarm<sp/>counters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_hours;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_minutes;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_seconds;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>sleep<sp/>mode?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_use_sleep_mode<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Defaults<sp/>to<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CAMERA_IS_ON<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>a<sp/>video<sp/>camera</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IS_LOGGING<sp/>tells<sp/>the<sp/>logger<sp/>if<sp/>it<sp/>is<sp/>awake<sp/>and<sp/>actively<sp/>logging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prevents<sp/>being<sp/>put<sp/>back<sp/>to<sp/>sleep<sp/>by<sp/>an<sp/>event<sp/>(e.g.,<sp/>rain<sp/>gage<sp/>bucket<sp/>tip)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>it<sp/>is<sp/>in<sp/>the<sp/>middle<sp/>of<sp/>logging,<sp/>so<sp/>it<sp/>will<sp/>return<sp/>to<sp/>logging<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IS_LOGGING<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Filename<sp/>and<sp/>logger<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Filename<sp/>is<sp/>set<sp/>up<sp/>as<sp/>8.3<sp/>filename:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//char<sp/>filename[12];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>datafilename;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>logger_name;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>interrupt<sp/>from<sp/>sensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extInt;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>NEW_RAIN_BUCKET_TIP<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>LOG_ALL_SENSORS_ON_BUCKET_TIP;<sp/></highlight><highlight class="comment">//<sp/>Defaults<sp/>to<sp/>False,<sp/>true<sp/>if<sp/>you<sp/>should<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>sensors<sp/>every<sp/>time<sp/>an<sp/>event<sp/>(e.g.,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rain<sp/>gage<sp/>bucket<sp/>tip)<sp/>happens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Flag<sp/>for<sp/>first<sp/>logging<sp/>attempt<sp/>after<sp/>booting<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Starts<sp/>out<sp/>as<sp/>True,<sp/>and<sp/>is<sp/>set<sp/>False<sp/>at<sp/>endLogging()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>True,<sp/>writes<sp/>header<sp/>information<sp/>to<sp/>a<sp/>separate<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>tells<sp/>the<sp/>user<sp/>if<sp/>the<sp/>logger<sp/>reboots,<sp/>and<sp/>save<sp/>the<sp/>full<sp/>history</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first_log_after_booting_up<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Rotation<sp/>count<sp/>for<sp/>anemometer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rotation_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generic<sp/>output<sp/>from<sp/>an<sp/>ASCII<sp/>char<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//char<sp/>ASCII_out[100];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Flag<sp/>for<sp/>whether<sp/>or<sp/>not<sp/>there<sp/>is<sp/>a<sp/>sensor<sp/>in<sp/>the<sp/>UART<sp/>port.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is,<sp/>disable<sp/>the<sp/>time-setting<sp/>protocols;<sp/>these<sp/>will<sp/>be<sp/>triggered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>detection<sp/>of<sp/>the<sp/>sensor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bool<sp/>sensor_on_UART,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="comment">//<sp/>INSTANTIATE<sp/>CLASSES<sp/>//</highlight></codeline>
<codeline lineno="195"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Both<sp/>for<sp/>same<sp/>clock,<sp/>but<sp/>need<sp/>to<sp/>create<sp/>instances<sp/>of<sp/>both</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>classes<sp/>in<sp/>library<sp/>(due<sp/>to<sp/>my<sp/>glomming<sp/>of<sp/>two<sp/>libs<sp/>together)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">RTClib<sp/>RTC;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">DS3231<sp/>Clock;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SD<sp/>CLASSES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">SdFat<sp/>sd;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">SdFile<sp/>datafile;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">SdFile<sp/>otherfile;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>rain<sp/>gage,<sp/>camera<sp/>timing,<sp/>and<sp/>anything<sp/>else<sp/>that<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>follow<sp/>the<sp/>standard<sp/>logging<sp/>cycle<sp/>/<sp/>regular<sp/>timing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal">SdFile<sp/>headerfile;<sp/></highlight><highlight class="comment">//<sp/>Holds<sp/>header<sp/>data;<sp/>re-printed<sp/>on<sp/>each<sp/>reboot<sp/>for<sp/>a<sp/>full<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>history<sp/>of<sp/>the<sp/>logger&apos;s<sp/>activity<sp/>and<sp/>to<sp/>see<sp/>if<sp/>it<sp/>has<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rebooted<sp/>while<sp/>in<sp/>the<sp/>field<sp/>(e.g.,<sp/>due<sp/>to<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>watchdog<sp/>timer<sp/>rescuing<sp/>it<sp/>from<sp/>hanging)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">DateTime<sp/>now;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"></codeline>
<codeline lineno="242"><highlight class="comment">//<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><ref refid="classLogger_1abc41bfb031d896170c7675fa96a6b30c" kindref="member">Logger::Logger</ref>(){}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a635c5dc0046646bec7023ef7133f0eb3" kindref="member">Logger::initialize</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_logger_name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_datafilename,<sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_hourInterval,<sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_minInterval,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_secInterval,<sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_ext_int,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_LOG_ALL_SENSORS_ON_BUCKET_TIP){</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bool<sp/>_sensor_on_UART,</highlight></codeline>
<codeline lineno="296"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>wdt_disable();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>wdt_enable(WDTO_8S);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>the<sp/>watchdog<sp/>timer<sp/>interupt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SLEEP<sp/>COUNTER<sp/>//</highlight></codeline>
<codeline lineno="302"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>the<sp/>global<sp/>variables<sp/>(not<sp/>intended<sp/>to<sp/>change)<sp/>to<sp/>the<sp/>input<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>logger_name<sp/>=<sp/>_logger_name;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>datafilename<sp/>=<sp/>_datafilename;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>hourInterval<sp/>=<sp/>_hourInterval;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>minInterval<sp/>=<sp/>_minInterval;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>secInterval<sp/>=<sp/>_secInterval;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>all<sp/>logging<sp/>intervals<sp/>are<sp/>0,<sp/>then<sp/>this<sp/>means<sp/>that<sp/>we<sp/>don&apos;t<sp/>go<sp/>to<sp/>sleep:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>continuous<sp/>logging!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(If<sp/>all<sp/>were<sp/>set<sp/>to<sp/>0,<sp/>logger<sp/>would<sp/>try<sp/>to<sp/>log<sp/>continuously<sp/>anyway;<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>makes<sp/>things<sp/>easier<sp/>by<sp/>avoiding<sp/>the<sp/>sleep<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((hourInterval<sp/>||<sp/>minInterval<sp/>||<sp/>secInterval)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>_use_sleep_mode<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>IS_LOGGING<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>is<sp/>always<sp/>logging,<sp/>in<sp/>this<sp/>case!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>the<sp/>global<sp/>and<sp/>changable<sp/>variables<sp/>to<sp/>input<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>LOG_ALL_SENSORS_ON_BUCKET_TIP<sp/>=<sp/>_LOG_ALL_SENSORS_ON_BUCKET_TIP;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXTERNAL<sp/>INTERRUPT<sp/>(E.G.,<sp/>RAIN<sp/>GAGE)<sp/>//</highlight></codeline>
<codeline lineno="324"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Specific<sp/>for<sp/>the<sp/>bottle<sp/>logger!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>extInt<sp/>=<sp/>_ext_int;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extInt){</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>pinMode(extInt,<sp/>INPUT);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>digitalWrite(3,<sp/>HIGH);<sp/></highlight><highlight class="comment">//<sp/>enable<sp/>internal<sp/>20K<sp/>pull-up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SERIAL<sp/>//</highlight></codeline>
<codeline lineno="335"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>Serial.begin(38400);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Logger<sp/>models<sp/>and<sp/>setup<sp/>//</highlight></codeline>
<codeline lineno="341"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_model<sp/>==<sp/>0<sp/>||<sp/>_model<sp/>==<sp/>1<sp/>||<sp/>_model<sp/>==<sp/>2){</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;Logger<sp/>model<sp/>=<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(_model_name);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Error:<sp/>model<sp/>name<sp/>must<sp/>be<sp/>&quot;</highlight><highlight class="stringliteral">&quot;bottle&quot;</highlight><highlight class="stringliteral">&quot;<sp/>or<sp/>&quot;</highlight><highlight class="stringliteral">&quot;big&quot;</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>execution.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>LEDwarn(100);<sp/></highlight><highlight class="comment">//<sp/>100<sp/>quick<sp/>flashes<sp/>of<sp/>the<sp/>LED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>sleepNow();<sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing<sp/>until<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>From<sp/>weather<sp/>station<sp/>code<sp/>For<sp/>power<sp/>savings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>http://jeelabs.net/projects/11/wiki/Weather_station_code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>cbi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>cbi(sfr,<sp/>bit)<sp/>(_SFR_BYTE(sfr)<sp/>&amp;=<sp/>~_BV(bit))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>sbi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>sbi(sfr,<sp/>bit)<sp/>(_SFR_BYTE(sfr)<sp/>|=<sp/>_BV(bit))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>LOGGER<sp/>FILE<sp/>NAME<sp/>//</highlight></codeline>
<codeline lineno="365"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>delay(10);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;Filename:<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>Serial.println(datafilename);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Logger<sp/>done<sp/>initializing.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>delay(10);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1ab5e0bd543758c65a17b77553a0e9f0c9" kindref="member">Logger::setupLogger</ref>(){</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>wdt_reset();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Beginning<sp/>logger<sp/>setup.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>a<sp/>3.3V<sp/>regulator<sp/>that<sp/>we<sp/>can<sp/>switch<sp/>on<sp/>and<sp/>off<sp/>(to<sp/>conserve<sp/>power)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>power<sp/>the<sp/>instruments.<sp/>Therefore,<sp/>we<sp/>set<sp/>the<sp/>analog<sp/>reference<sp/>to<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;EXTERNAL&quot;.<sp/>Do<sp/>NOT<sp/>set<sp/>it<sp/>to<sp/>the<sp/>internal<sp/>1.1V<sp/>reference<sp/>voltage<sp/>or<sp/>to<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;DEFAULT&quot;<sp/>(VCC),<sp/>UNLESS<sp/>you<sp/>are<sp/><sp/>absolutely<sp/>sure<sp/>that<sp/>you<sp/>need<sp/>to<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>3.3V<sp/>regulator<sp/>connected<sp/>to<sp/>the<sp/>AREF<sp/>pin<sp/>is<sp/>off.<sp/>Otherwise,<sp/>you<sp/>will<sp/>short</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1.1V<sp/>(or<sp/>VCC)<sp/>against<sp/>3.3V<sp/>and<sp/>likely<sp/>damage<sp/>the<sp/>MCU<sp/>/<sp/>fry<sp/>the<sp/>ADC(?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>analogReference(EXTERNAL);<sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SET<sp/>PINS<sp/>//</highlight></codeline>
<codeline lineno="401"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>pinMode(wakePin,INPUT);<sp/></highlight><highlight class="comment">//<sp/>Interrupt<sp/>to<sp/>wake<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>digitalWrite(wakePin,HIGH);<sp/></highlight><highlight class="comment">//<sp/>enable<sp/>internal<sp/>20K<sp/>pull-up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>pins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>pinMode(CSpin,OUTPUT);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>pinMode(SensorPowerPin,OUTPUT);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>pinMode(LEDpin,OUTPUT);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>pinMode(SDpowerPin,OUTPUT);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>pinMode(ClockPowerPin,OUTPUT);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Manual<sp/>wake<sp/>pin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_model<sp/>==<sp/>bottle_logger){</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Setting<sp/>manualWakePin&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>pinMode(manualWakePin,INPUT);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>digitalWrite(manualWakePin,HIGH);<sp/></highlight><highlight class="comment">//<sp/>enable<sp/>internal<sp/>20K<sp/>pull-up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Have<sp/>Sensor<sp/>Power<sp/>set<sp/>HIGH,<sp/>because<sp/>if<sp/>any<sp/>I2C<sp/>sensors<sp/>are<sp/>attached<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>unpowered,<sp/>they<sp/>will<sp/>drag<sp/>down<sp/>the<sp/>signal<sp/>from<sp/>the<sp/>RTC,<sp/>and<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>logger<sp/>will<sp/>not<sp/>properly<sp/>initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>digitalWrite(SensorPowerPin,HIGH);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SERIAL<sp/>//</highlight></codeline>
<codeline lineno="424"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>Serial.begin(38400);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>announce_start();<sp/></highlight><highlight class="comment">//<sp/>Announce<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>WIRE:<sp/>I2C<sp/>RTC<sp/>//</highlight></codeline>
<codeline lineno="432"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>Wire.begin();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>Wire.setTimeout(100);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>SDpowerOn();</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>RTCon();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>CHECK<sp/>CLOCK<sp/>//</highlight></codeline>
<codeline lineno="442"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Includes<sp/>check<sp/>whether<sp/>you<sp/>are<sp/>talking<sp/>to<sp/>Python<sp/>terminal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>startup_sequence();</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SET<sp/>FIRST<sp/>ALARM<sp/>TO<sp/>OCCUR<sp/>ON<sp/>THE<sp/>NEXT<sp/>INTEGER-DIVISIBLE<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>NUMBER<sp/>OF<sp/>WHATEVER<sp/>THE<sp/>SMALLEST<sp/>NEXT<sp/>QUANTITY<sp/>IS<sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="450"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>Clock.checkIfAlarm(1);<sp/></highlight><highlight class="comment">//Clear<sp/>alarm<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>Clock.checkIfAlarm(2);<sp/></highlight><highlight class="comment">//Clear<sp/>alarm<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//uint32_t<sp/>seconds_now;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//uint32_t<sp/>seconds_at_alarm;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>uint32_t<sp/>SECONDS_FROM_1970_TO_2000<sp/>=<sp/>946684800;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>uint32_t<sp/>unixtime_now;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>uint32_t<sp/>log_interval_seconds;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>uint32_t<sp/>unixtime_at_next_log;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>what<sp/>time<sp/>is<sp/>it<sp/>now?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>now<sp/>=<sp/>RTC.now();</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Second,<sp/>what<sp/>is<sp/>the<sp/>next<sp/>time<sp/>on<sp/>which<sp/>we<sp/>fall<sp/>on<sp/>an<sp/>integer<sp/>of<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>logging<sp/>interval?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Always<sp/>act<sp/>as<sp/>if<sp/>logging<sp/>started<sp/>at<sp/>Midnight<sp/>on<sp/>Jan<sp/>1,<sp/>1970,<sp/>to<sp/>ensure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>even<sp/>terrible,<sp/>irregular<sp/>logging<sp/>intervals<sp/>produce<sp/>times<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>line<sp/>up<sp/>with<sp/>one<sp/>anohter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>no<sp/>leap<sp/>seconds!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>unixtime_now<sp/>=<sp/>now.unixtime();</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>log_interval_seconds<sp/>=<sp/>hourInterval*3600<sp/>+<sp/>minInterval*60<sp/>+<sp/>secInterval;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>unixtime_at_next_log<sp/>=<sp/>unixtime_now<sp/>+<sp/>log_interval_seconds<sp/>-<sp/>\</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(unixtime_now<sp/>%<sp/>log_interval_seconds);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we<sp/>have<sp/>enough<sp/>time<sp/>to<sp/>not<sp/>pass<sp/>the<sp/>logging<sp/>event<sp/>accidentally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>5<sp/>seconds<sp/>is<sp/>way<sp/>more<sp/>than<sp/>needed,<sp/>but<sp/>better<sp/>safe<sp/>than<sp/>sorry...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unixtime_at_next_log<sp/>-<sp/>unixtime_now<sp/>&lt;<sp/>5){</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>unixtime_at_next_log<sp/>+=<sp/>log_interval_seconds;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>DateTime<sp/>t_nextLog<sp/>=<sp/>unixtime_at_next_log;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>_hours<sp/>=<sp/>t_nextLog.hour();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>_minutes<sp/>=<sp/>t_nextLog.minute();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>_seconds<sp/>=<sp/>t_nextLog.second();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>alarm(_hours,<sp/>_minutes,<sp/>_seconds);<sp/><sp/></highlight><highlight class="comment">//Set<sp/>first<sp/>alarm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>displayAlarms();<sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>Alarms<sp/>and<sp/>display<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>delay(10);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>CARD<sp/>SETUP<sp/>//</highlight></codeline>
<codeline lineno="493"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>SdFat<sp/>or<sp/>print<sp/>a<sp/>detailed<sp/>error<sp/>message<sp/>and<sp/>halt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>half<sp/>speed<sp/>like<sp/>the<sp/>native<sp/>library.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>to<sp/>SPI_FULL_SPEED<sp/>for<sp/>more<sp/>performance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>name();</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>delay(5);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Callback<sp/>to<sp/>set<sp/>date<sp/>and<sp/>time<sp/>in<sp/>SD<sp/>card<sp/>file<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Following:<sp/>https://forum.arduino.cc/index.php?topic=348562.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See:<sp/>https://github.com/NorthernWidget/Logger/issues/6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>SdFile::dateTimeCallback(_internalDateTime);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>delay(5);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>SD<sp/>card...&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sd.begin(CSpin,<sp/>SPI_HALF_SPEED)){</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Card<sp/>failed,<sp/>or<sp/>not<sp/>present&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>LEDwarn(20);<sp/></highlight><highlight class="comment">//<sp/>20<sp/>quick<sp/>flashes<sp/>of<sp/>the<sp/>LED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>sd.initErrorHalt();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;card<sp/>initialized.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>Serial.println();</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>LEDgood();<sp/></highlight><highlight class="comment">//<sp/>LED<sp/>flashes<sp/>peppy<sp/>happy<sp/>pattern,<sp/>indicating<sp/>that<sp/>all<sp/>is<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/>//<sp/>START<sp/>HERE!<sp/>DOESN&apos;T<sp/>WORK<sp/>NOW<sp/>--<sp/>WHY<sp/>NOT?<sp/>NOT<sp/>BECAUSE<sp/>OF<sp/>NON-8.3-FILENAME</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/><sp/>start_logging_to_otherfile(&quot;StartTimes.txt&quot;);</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/><sp/>Serial.println(now.unixtime());</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/><sp/>otherfile.print(now.unixtime());</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/><sp/>otherfile.print(&quot;,&quot;);</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/><sp/>end_logging_to_otherfile();</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/><sp/>Serial.println(now.unixtime());</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>start_logging_to_datafile();</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>start_logging_to_headerfile();</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>name();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Logger<sp/>initialization<sp/>complete!<sp/>Ciao<sp/>bellos.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>delay(20);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_use_sleep_mode){</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>SDpowerOff();</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>RTCsleep();</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>wdt_reset();</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="comment">//<sp/>GETTERS<sp/>AND<sp/>SETTERS:<sp/>ADD<sp/>MORE<sp/>AS<sp/>NEEDED<sp/>//</highlight></codeline>
<codeline lineno="547"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classLogger_1acc758b6fdaac8099c492929aa7f1691d" kindref="member">Logger::get_use_sleep_mode</ref>(){</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_use_sleep_mode;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="comment">//<sp/>PRIVATE<sp/>FUNCTIONS:<sp/>UTILITIES<sp/>FOR<sp/>LOGGER<sp/>LIBRARY<sp/>//</highlight></codeline>
<codeline lineno="565"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::pinUnavailable(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin){</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_errorFlag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_pinNameList_crit[9]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;CSpin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SensorPowerPin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SDpowerPin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ClockPowerPin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;LEDpin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wakePin&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_pinList_crit[9]<sp/>=<sp/>{CSpin,<sp/>SensorPowerPin,<sp/>SDpowerPin,<sp/>ClockPowerPin,<sp/>LEDpin,<sp/>wakePin};</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_pinNameList[9]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;MISOpin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MOSIpin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SCKpin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SDApin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SCLpin&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_pinList[9]<sp/>=<sp/>{MISOpin,<sp/>MOSIpin,<sp/>SCKpin,<sp/>SDApin,<sp/>SCLpin};</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;9;<sp/>i++){</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pin<sp/>==<sp/>_pinList[i]){</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_errorFlag++;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;Error:<sp/>trying<sp/>to<sp/>alter<sp/>the<sp/>state<sp/>of<sp/>Pin<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(_pinList[i]);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;This<sp/>pin<sp/>is<sp/>assigned<sp/>in<sp/>a<sp/>system-critical<sp/>role<sp/>as:<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(_pinNameList[i]);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>numbers<sp/>&gt;13<sp/>in<sp/>standard<sp/>Arduino<sp/>are<sp/>analog<sp/>pins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SPI_or_I2C_flag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;9;<sp/>i++){</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pin<sp/>==<sp/>_pinList_crit[i]){</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPI_or_I2C_flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SPI_or_I2C_flag){</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;You<sp/>are<sp/>using<sp/>the<sp/>SPI<sp/>or<sp/>I2C<sp/>bus;<sp/>take<sp/>care<sp/>that<sp/>this<sp/>does<sp/>not<sp/>clash&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;with<sp/>the<sp/>SD<sp/>card<sp/>interface<sp/>(SPI)<sp/>or<sp/>the<sp/>clock<sp/>interface<sp/>(I2C).&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;9;<sp/>i++){</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pin<sp/>==<sp/>_pinList_crit[i]){</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_errorFlag++;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;Error:<sp/>trying<sp/>to<sp/>alter<sp/>the<sp/>state<sp/>of<sp/>Pin<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(_pinList_crit[i]);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;This<sp/>pin<sp/>is<sp/>assigned<sp/>in<sp/>a<sp/>system-critical<sp/>role<sp/>as:<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(_pinNameList_crit[i]);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>numbers<sp/>&gt;13<sp/>in<sp/>standard<sp/>Arduino<sp/>are<sp/>analog<sp/>pins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_errorFlag){</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Error<sp/>encountered.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Stalling<sp/>program:<sp/>cannot<sp/>reassign<sp/>critical<sp/>pins<sp/>to<sp/>sensors,<sp/>etc.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEDwarn(50);<sp/></highlight><highlight class="comment">//<sp/>50<sp/>quick<sp/>flashes<sp/>of<sp/>the<sp/>LED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing<sp/>until<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1){}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::sleepNow()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>we<sp/>put<sp/>the<sp/>arduino<sp/>to<sp/>sleep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>IS_LOGGING<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Definitely<sp/>not<sp/>logging<sp/>anymore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>is<sp/>the<sp/>time<sp/>to<sp/>set<sp/>the<sp/>sleep<sp/>mode.<sp/>In<sp/>the<sp/>Atmega8<sp/>datasheet</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>http://www.atmel.com/dyn/resources/prod_documents/doc2486.pdf<sp/>on<sp/>page<sp/>35</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>there<sp/>is<sp/>a<sp/>list<sp/>of<sp/>sleep<sp/>modes<sp/>which<sp/>explains<sp/>which<sp/>clocks<sp/>and<sp/></highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>wake<sp/>up<sp/>sources<sp/>are<sp/>available<sp/>in<sp/>which<sp/>sleep<sp/>mode.</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>the<sp/>avr/sleep.h<sp/>file,<sp/>the<sp/>call<sp/>names<sp/>of<sp/>these<sp/>sleep<sp/>modes<sp/>are<sp/>to<sp/>be<sp/>found:</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>5<sp/>different<sp/>modes<sp/>are:</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>SLEEP_MODE_IDLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-the<sp/>least<sp/>power<sp/>savings<sp/></highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>SLEEP_MODE_ADC</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>SLEEP_MODE_PWR_SAVE</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>SLEEP_MODE_STANDBY</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>SLEEP_MODE_PWR_DOWN<sp/><sp/><sp/><sp/><sp/>-the<sp/>most<sp/>power<sp/>savings</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="636"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>now,<sp/>we<sp/>want<sp/>as<sp/>much<sp/>power<sp/>savings<sp/>as<sp/>possible,<sp/>so<sp/>we<sp/></highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>choose<sp/>the<sp/>according<sp/></highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>sleep<sp/>mode:<sp/>SLEEP_MODE_PWR_DOWN</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_sleep_mode(SLEEP_MODE_PWR_DOWN);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sleep<sp/>mode<sp/>is<sp/>set<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>setPrescaler(6);<sp/>//<sp/>Clock<sp/>prescaler<sp/>of<sp/>64,<sp/>slows<sp/>down<sp/>to<sp/>conserve<sp/>power</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cbi(ADCSRA,ADEN);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>switch<sp/>Analog<sp/>to<sp/>Digitalconverter<sp/>OFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sleep_enable();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enables<sp/>the<sp/>sleep<sp/>bit<sp/>in<sp/>the<sp/>mcucr<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>sleep<sp/>is<sp/>possible.<sp/>just<sp/>a<sp/>safety<sp/>pin<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>it<sp/>is<sp/>time<sp/>to<sp/>enable<sp/>an<sp/>interrupt.<sp/>We<sp/>do<sp/>it<sp/>here<sp/>so<sp/>an<sp/></highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>accidentally<sp/>pushed<sp/>interrupt<sp/>button<sp/>doesn&apos;t<sp/>interrupt<sp/></highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>our<sp/>running<sp/>program.<sp/>if<sp/>you<sp/>want<sp/>to<sp/>be<sp/>able<sp/>to<sp/>run<sp/></highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>interrupt<sp/>code<sp/>besides<sp/>the<sp/>sleep<sp/>function,<sp/>place<sp/>it<sp/>in<sp/></highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>setup()<sp/>for<sp/>example.</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>the<sp/>function<sp/>call<sp/>attachInterrupt(A,<sp/>B,<sp/>C)</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>A<sp/><sp/><sp/>can<sp/>be<sp/>either<sp/>0<sp/>or<sp/>1<sp/>for<sp/>interrupts<sp/>on<sp/>pin<sp/>2<sp/>or<sp/>3.<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>B<sp/><sp/><sp/>Name<sp/>of<sp/>a<sp/>function<sp/>you<sp/>want<sp/>to<sp/>execute<sp/>at<sp/>interrupt<sp/>for<sp/>A.</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>C<sp/><sp/><sp/>Trigger<sp/>mode<sp/>of<sp/>the<sp/>interrupt<sp/>pin.<sp/>can<sp/>be:</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>low<sp/>level<sp/>triggers</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHANGE<sp/><sp/><sp/><sp/><sp/>a<sp/>change<sp/>in<sp/>level<sp/>triggers</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RISING<sp/><sp/><sp/><sp/><sp/>a<sp/>rising<sp/>edge<sp/>of<sp/>a<sp/>level<sp/>triggers</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALLING<sp/><sp/><sp/><sp/>a<sp/>falling<sp/>edge<sp/>of<sp/>a<sp/>level<sp/>triggers</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>all<sp/>but<sp/>the<sp/>IDLE<sp/>sleep<sp/>modes<sp/>only<sp/>LOW<sp/>can<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>START<sp/>HERE!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hourInterval<sp/>&amp;&amp;<sp/>minInterval<sp/>&amp;&amp;<sp/>secInterval<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>extInt<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;All<sp/>inputs<sp/>to<sp/>wake<sp/>from<sp/>sleep<sp/>disabled!<sp/>Reprogram,<sp/>please!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Serial.print(F(&quot;interrupt&quot;));<sp/><sp/>delay(10);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hourInterval<sp/>||<sp/>minInterval<sp/>||<sp/>secInterval<sp/>!=<sp/>-1){</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attachInterrupt(interruptNum,<sp/>wakeUpNow,<sp/>LOW);<sp/></highlight><highlight class="comment">//<sp/>wakeUpNow<sp/>when<sp/>wakePin<sp/>goes<sp/>LOW<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Serial.println(F(&quot;<sp/>attached&quot;));<sp/>delay(10);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extInt){</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attachInterrupt(1,<sp/>wakeUpNow_tip,<sp/>LOW);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sleep_mode();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>the<sp/>device<sp/>is<sp/>actually<sp/>put<sp/>to<sp/>sleep!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>THE<sp/>PROGRAM<sp/>CONTINUES<sp/>FROM<sp/>HERE<sp/>AFTER<sp/>WAKING<sp/>UP.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sleep_disable();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>thing<sp/>after<sp/>waking<sp/>from<sp/>sleep:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>sleep...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>detachInterrupt(1);<sp/>//<sp/>crude,<sp/>but<sp/>keeps<sp/>interrupts<sp/>from<sp/>clashing.<sp/>Need<sp/>to<sp/>improve<sp/>this<sp/>to<sp/>allow<sp/>both<sp/>measurements<sp/>types!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>06-11-2015:<sp/>The<sp/>above<sp/>line<sp/>commented<sp/>to<sp/>allow<sp/>the<sp/>rain<sp/>gage<sp/>to<sp/>be<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>the<sp/>same<sp/>time<sp/>as<sp/>other<sp/>readings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maybe<sp/>move<sp/>this<sp/>to<sp/>specific<sp/>post-wakeup<sp/>code?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detachInterrupt(interruptNum);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disables<sp/>interrupt<sp/>so<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wakeUpNow<sp/>code<sp/>will<sp/>not<sp/>be<sp/>executed<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>during<sp/>normal<sp/>running<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>be<sp/>defined<sp/>outside<sp/>of<sp/>Logger<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>wakeUpNow()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>the<sp/>interrupt<sp/>is<sp/>handled<sp/>after<sp/>wakeup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>execute<sp/>code<sp/>here<sp/>after<sp/>wake-up<sp/>before<sp/>returning<sp/>to<sp/>the<sp/>loop()<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>timers<sp/>and<sp/>code<sp/>using<sp/>timers<sp/>(serial.print<sp/>and<sp/>more...)<sp/>will<sp/>not<sp/>work<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>really<sp/>need<sp/>to<sp/>execute<sp/>any<sp/>special<sp/>functions<sp/>here,<sp/>since<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>want<sp/>the<sp/>thing<sp/>to<sp/>wake<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>IS_LOGGING<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Currently<sp/>logging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>will<sp/>allow<sp/>the<sp/>logging<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>to<sp/>happen<sp/>even<sp/>if<sp/>the<sp/>logger<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>already<sp/>awake<sp/>to<sp/>deal<sp/>with<sp/>a<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>rain<sp/>gauge<sp/>bucket<sp/>tip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>wakeUpNow_tip()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>the<sp/>interrupt<sp/>is<sp/>handled<sp/>after<sp/>wakeup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>execute<sp/>code<sp/>here<sp/>after<sp/>wake-up<sp/>before<sp/>returning<sp/>to<sp/>the<sp/>loop()<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>timers<sp/>and<sp/>code<sp/>using<sp/>timers<sp/>(serial.print<sp/>and<sp/>more...)<sp/>will<sp/>not<sp/>work<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>really<sp/>need<sp/>to<sp/>execute<sp/>any<sp/>special<sp/>functions<sp/>here,<sp/>since<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>want<sp/>the<sp/>thing<sp/>to<sp/>wake<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//sleep_disable();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>first<sp/>thing<sp/>after<sp/>waking<sp/>from<sp/>sleep:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>sleep...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>NEW_RAIN_BUCKET_TIP<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>logger<sp/>is<sp/>already<sp/>logging,<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!!!!!!!!<sp/>WHAT<sp/>WAS<sp/>SUPPOSED<sp/>TO<sp/>GO<sp/>INSIDE<sp/>HERE?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_LOGGING){</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::alarm(uint8_t<sp/>_hours,<sp/>uint8_t<sp/>_minutes,<sp/>uint8_t<sp/>_seconds){</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Alarm<sp/>bit<sp/>info:</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/><sp/><sp/>*<sp/>A1Dy<sp/>true<sp/>makes<sp/>the<sp/>alarm<sp/>go<sp/>on<sp/>A1Day<sp/>=<sp/>Day<sp/>of<sp/>Week,</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/><sp/><sp/>*<sp/>A1Dy<sp/>false<sp/>makes<sp/>the<sp/>alarm<sp/>go<sp/>on<sp/>A1Day<sp/>=<sp/>Date<sp/>of<sp/>month.</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/><sp/>*<sp/>byte<sp/>AlarmBits<sp/>sets<sp/>the<sp/>behavior<sp/>of<sp/>the<sp/>alarms:</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>Dy<sp/><sp/>A1M4<sp/><sp/><sp/><sp/>A1M3<sp/><sp/><sp/><sp/>A1M2<sp/><sp/><sp/><sp/>A1M1<sp/><sp/><sp/><sp/>Rate</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>X<sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Once<sp/>per<sp/>second</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>X<sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alarm<sp/>when<sp/>seconds<sp/>match</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>X<sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alarm<sp/>when<sp/>min,<sp/>sec<sp/>match</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>X<sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alarm<sp/>when<sp/>hour,<sp/>min,<sp/>sec<sp/>match</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alarm<sp/>when<sp/>date,<sp/>h,<sp/>m,<sp/>s<sp/>match</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>1<sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alarm<sp/>when<sp/>DoW,<sp/>h,<sp/>m,<sp/>s<sp/>match</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>Dy<sp/><sp/>A2M4<sp/><sp/><sp/><sp/>A2M3<sp/><sp/><sp/><sp/>A2M2<sp/><sp/><sp/><sp/>Rate</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>X<sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Once<sp/>per<sp/>minute<sp/>(at<sp/>seconds<sp/>=<sp/>00)</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>X<sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alarm<sp/>when<sp/>minutes<sp/>match</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>X<sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alarm<sp/>when<sp/>hours<sp/>and<sp/>minutes<sp/>match</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>0<sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alarm<sp/>when<sp/>date,<sp/>hour,<sp/>min<sp/>match</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>1<sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alarm<sp/>when<sp/>DoW,<sp/>hour,<sp/>min<sp/>match</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="751"><highlight class="comment"></highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>ALRM1_MATCH_EVERY_SEC<sp/><sp/>0b1111<sp/><sp/>//<sp/>once<sp/>a<sp/>second</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>ALRM1_MATCH_SEC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0b1110<sp/><sp/>//<sp/>when<sp/>seconds<sp/>match</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>ALRM1_MATCH_MIN_SEC<sp/><sp/><sp/><sp/>0b1100<sp/><sp/>//<sp/>when<sp/>minutes<sp/>and<sp/>seconds<sp/>match</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>ALRM1_MATCH_HR_MIN_SEC<sp/>0b1000<sp/><sp/>//<sp/>when<sp/>hours,<sp/>minutes,<sp/>and<sp/>seconds<sp/>match</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/>ALRM1_SET<sp/>=<sp/>ALRM1_MATCH_HR_MIN_SEC;</highlight></codeline>
<codeline lineno="757"><highlight class="comment"></highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>ALRM2_ONCE_PER_MIN<sp/><sp/><sp/><sp/><sp/>0b111<sp/><sp/><sp/>//<sp/>once<sp/>per<sp/>minute<sp/>(00<sp/>seconds<sp/>of<sp/>every<sp/>minute)</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>ALRM2_MATCH_MIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0b110<sp/><sp/><sp/>//<sp/>when<sp/>minutes<sp/>match</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>ALRM2_MATCH_HR_MIN<sp/><sp/><sp/><sp/><sp/>0b100<sp/><sp/><sp/>//<sp/>when<sp/>hours<sp/>and<sp/>minutes<sp/>match</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/><sp/>const<sp/>int<sp/>ALRM2_DATE_TIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0b000<sp/><sp/><sp/>//<sp/>when<sp/>hours<sp/>and<sp/>minutes<sp/>match</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/>ALRM2_SET<sp/>=<sp/>ALRM2_DISABLE;</highlight></codeline>
<codeline lineno="763"><highlight class="comment"></highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>AlarmBits,<sp/>ALRM2<sp/>first,<sp/>followed<sp/>by<sp/>ALRM1</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlarmBits<sp/>=<sp/>ALRM2_SET;</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlarmBits<sp/>&lt;&lt;=<sp/>4;</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlarmBits<sp/>|=<sp/>ALRM1_SET;</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>RTCon();</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>byte<sp/>AlarmBits<sp/>=<sp/>0b01001000;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>Clock.turnOffAlarm(1);<sp/></highlight><highlight class="comment">//Turn<sp/>off<sp/>alarms<sp/>before<sp/>setting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>Clock.turnOffAlarm(2);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>Clock.checkIfAlarm(1);<sp/></highlight><highlight class="comment">//Clear<sp/>alarm<sp/>flags,<sp/>do<sp/>I<sp/>need<sp/>to<sp/>do<sp/>this<sp/>here?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>Clock.checkIfAlarm(2);<sp/></highlight><highlight class="comment">//Clear<sp/>alarm<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>primary<sp/>alarm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>Clock.setA1Time(0,<sp/>_hours,<sp/>_minutes,<sp/>_seconds,<sp/>AlarmBits,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>backup<sp/>alarm<sp/>that<sp/>will<sp/>wake<sp/>the<sp/>logger<sp/>in<sp/>case<sp/>it<sp/>misses<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>alarm<sp/>for<sp/>some<sp/>unknown<sp/>reason</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_hours_backup<sp/>=<sp/>_hours;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_minutes_backup<sp/>=<sp/>_minutes+2;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_minutes_backup<sp/>&gt;<sp/>59){_minutes_backup<sp/>=<sp/>_minutes_backup<sp/>-<sp/>60;<sp/>_hours_backup++;}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_hours_backup<sp/>&gt;<sp/>23){_hours_backup<sp/>=<sp/>_hours_backup<sp/>-<sp/>24;}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>Clock.setA2Time(0,<sp/>_hours_backup,<sp/>_minutes_backup,<sp/>AlarmBits,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//setting<sp/>as<sp/>backup<sp/>wake<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>Clock.turnOnAlarm(1);<sp/></highlight><highlight class="comment">//Turn<sp/>on<sp/>alarms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>delay(1);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>Clock.turnOnAlarm(2);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>delay(1);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Serial.print(&apos;<sp/>&apos;);<sp/>Using<sp/>Serial<sp/>to<sp/>fix<sp/>code<sp/>from<sp/>freezing;<sp/>don&apos;t<sp/>understand.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Have<sp/>looked<sp/>through<sp/>HW<sp/>Serial,<sp/>Print,<sp/>Stream<sp/>libraries;<sp/>can&apos;t<sp/>tell<sp/>why<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(was<sp/>a<sp/>&lt;15<sp/>minute<sp/>look)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Somehow,<sp/>freezes<sp/>when<sp/>next<sp/>needs<sp/>to<sp/>talk<sp/>to<sp/>clock<sp/>if<sp/>I<sp/>don&apos;t<sp/>do<sp/>this!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>Serial.write(2);<sp/></highlight><highlight class="comment">//<sp/>write<sp/>ASCII<sp/>STX;<sp/>somehow<sp/>Serial<sp/>comes<sp/>to<sp/>the<sp/>rescue<sp/>again!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>Serial.write(2);<sp/></highlight><highlight class="comment">//<sp/>STX<sp/>just<sp/>as<sp/>a<sp/>character<sp/>that<sp/>doesn&apos;t<sp/>take<sp/>much<sp/>space<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>Serial<sp/>monitor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>Serial.flush();</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//delay(10);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bool<sp/>ADy,<sp/>Apm,<sp/>A12h;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//byte<sp/>ADay,<sp/>AHour,<sp/>AMinute,<sp/>ASecond;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Clock.getA1Time(ADay,<sp/>AHour,<sp/>AMinute,<sp/>ASecond,<sp/>AlarmBits,<sp/>ADy,<sp/>A12h,<sp/>Apm);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Clock.getA2Time(ADay,<sp/>AHour,<sp/>AMinute,<sp/>AlarmBits,<sp/>ADy,<sp/>A12h,<sp/>Apm);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//displayAlarms();<sp/>delay(10);<sp/><sp/>//Uncomment<sp/>to<sp/>see<sp/>alarms<sp/>on<sp/>serial<sp/>monitor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::displayAlarms(){</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ADy;<sp/></highlight><highlight class="comment">//<sp/>Looks<sp/>like<sp/>this<sp/>can<sp/>be<sp/>empty<sp/>because<sp/>it<sp/>is<sp/>defined<sp/>within</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function...<sp/>meaning<sp/>that<sp/>DS3231<sp/>library<sp/>could<sp/>use<sp/>some<sp/>updates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>will<sp/>hold<sp/>off<sp/>on<sp/>that<sp/>until<sp/>a<sp/>full<sp/>overhaul<sp/>/<sp/>upgrade<sp/>/<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>migration<sp/>to<sp/>a<sp/>fully<sp/>RTClib-compatible<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Apm;<sp/></highlight><highlight class="comment">//<sp/>Empty,<sp/>but<sp/>must<sp/>be<sp/>declared<sp/>for<sp/>clock<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>A12h<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>byte<sp/>ADay,<sp/>AHour,<sp/>AMinute,<sp/>ASecond,<sp/>AlarmBits;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;Alarm<sp/>1<sp/>(d/h/m/s):<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>Clock.getA1Time(ADay,<sp/>AHour,<sp/>AMinute,<sp/>ASecond,<sp/>AlarmBits,<sp/>ADy,<sp/>A12h,<sp/>Apm);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(ADy)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(&quot;DoW<sp/>&quot;));</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(&quot;Date<sp/>&quot;));</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(AHour,<sp/>DEC);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(AMinute,<sp/>DEC);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(ASecond,<sp/>DEC);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A12h)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Apm)<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;pm&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;am&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Clock.checkAlarmEnabled(1)){</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;enabled&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;not<sp/>enabled&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>Alarm<sp/>2<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;Alarm<sp/>2<sp/>(d/h/m):<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>Clock.getA2Time(ADay,<sp/>AHour,<sp/>AMinute,<sp/>AlarmBits,<sp/>ADy,<sp/>A12h,<sp/>Apm);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(ADy){</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(&quot;DoW<sp/>&quot;));</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/><sp/><sp/><sp/>Serial.print(F(&quot;Date<sp/>&quot;));</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/><sp/><sp/><sp/>Serial.print(ADay,<sp/>DEC);</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/><sp/><sp/><sp/>Serial.print(&apos;<sp/>&apos;);</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(AHour,<sp/>DEC);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(AMinute,<sp/>DEC);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A12h)<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Apm)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;pm<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;am<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Clock.checkAlarmEnabled(2))<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;enabled&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;not<sp/>enabled&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>Serial.println();</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>display<sp/>alarm<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Serial.print(&apos;\n&apos;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Serial.println(AlarmBits,<sp/>BIN);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Serial.println(Clock.getSecond());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally,<sp/>print<sp/>the<sp/>current<sp/>time<sp/>to<sp/>Serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//displayTime();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::checkAlarms(){</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ADy;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Apm;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>A12h<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>Clock.checkIfAlarm(1);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(_use_sleep_mode){<sp/><sp/>//Removed<sp/>by<sp/>Chad<sp/>4/20/17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Clock.checkIfAlarm(2))<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;Alarm<sp/>missed!<sp/>Resetting<sp/>logger.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>datafile.close();</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEDwarn(20);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delay(30);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Callback<sp/>to<sp/>set<sp/>date<sp/>and<sp/>time<sp/>in<sp/>SD<sp/>card<sp/>file<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Following:<sp/>https://forum.arduino.cc/index.php?topic=348562.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See:<sp/>https://github.com/NorthernWidget/Logger/issues/6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SdFile::dateTimeCallback(_internalDateTime);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sd.begin(CSpin,<sp/>SPI_HALF_SPEED))<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Error<sp/>initializing<sp/>SD<sp/>card<sp/>for<sp/>writing&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEDwarn(40);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>to<sp/>record<sp/>times<sp/>when<sp/>the<sp/>alarms<sp/>were<sp/>missed<sp/>and<sp/>the<sp/>watchdog</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>timer<sp/>was<sp/>needed<sp/>to<sp/>reset<sp/>the<sp/>logger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start_logging_to_otherfile(</highlight><highlight class="stringliteral">&quot;Alarm_miss.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ADy;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Apm;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/>ADay,<sp/>AHour,<sp/>AMinute,<sp/>ASecond,<sp/>AlarmBits;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(now.unixtime());</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(</highlight><highlight class="stringliteral">&quot;Alarm:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clock.getA1Time(ADay,<sp/>AHour,<sp/>AMinute,<sp/>ASecond,<sp/>AlarmBits,<sp/>ADy,<sp/>A12h,<sp/>Apm);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(ADay,<sp/>DEC);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(</highlight><highlight class="stringliteral">&quot;<sp/>DoW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(AHour,<sp/>DEC);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(AMinute,<sp/>DEC);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(ASecond,<sp/>DEC);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A12h)<sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Apm)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(</highlight><highlight class="stringliteral">&quot;PM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(</highlight><highlight class="stringliteral">&quot;AM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end_logging_to_otherfile();</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delay(20000);<sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>until<sp/>WDT<sp/>resets<sp/>logger<sp/>(&lt;=<sp/>8<sp/>seconds)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}<sp/><sp/>//Removed<sp/>by<sp/>Chad<sp/>4/20/17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::displayTime(){</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="953"><highlight class="comment"><sp/><sp/><sp/>Get<sp/>current<sp/>time.</highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/><sp/><sp/>Always<sp/>24-hour<sp/>clock</highlight></codeline>
<codeline lineno="955"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PM;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;UTC<sp/>DATE/TIME:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>delay(5);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>now<sp/>=<sp/>RTC.now();</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(2000+now.year(),<sp/>DEC);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>month</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(now.month(),<sp/>DEC);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>date</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(now.day(),<sp/>DEC);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>day<sp/>of<sp/>the<sp/>week</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Serial.print(Clock.getDoW(),<sp/>DEC);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Serial.print(&apos;<sp/>&apos;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally<sp/>the<sp/>hour,<sp/>minute,<sp/>and<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(now.hour(),<sp/>DEC);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(now.minute(),<sp/>DEC);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(now.second(),<sp/>DEC);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enough<sp/>time<sp/>to<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline lineno="979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::LEDwarn(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nflash)</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flash<sp/>LED<sp/>quickly<sp/>to<sp/>say<sp/>that<sp/>the<sp/>SD<sp/>card<sp/>(and<sp/>therefore<sp/>the<sp/>logger)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>not<sp/>properly<sp/>initialized<sp/>upon<sp/>restart</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;=nflash;i++){</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(LEDpin,HIGH);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delay(40);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(LEDpin,LOW);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delay(40);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::LEDgood()</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Peppy<sp/>blinky<sp/>pattern<sp/>to<sp/>show<sp/>that<sp/>the<sp/>logger<sp/>has<sp/>successfully<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>digitalWrite(LEDpin,HIGH);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(1000);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>digitalWrite(LEDpin,LOW);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(300);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>digitalWrite(LEDpin,HIGH);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(100);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>digitalWrite(LEDpin,LOW);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(100);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>digitalWrite(LEDpin,HIGH);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(100);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>digitalWrite(LEDpin,LOW);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::LEDtimeWrong(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncycles)</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Syncopated<sp/>pattern<sp/>to<sp/>show<sp/>that<sp/>the<sp/>clock<sp/>has<sp/>probably<sp/>reset<sp/>to<sp/>January</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1st,<sp/>2000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;=ncycles;i++)</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(LEDpin,HIGH);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delay(250);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(LEDpin,LOW);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delay(100);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(LEDpin,HIGH);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delay(100);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(LEDpin,LOW);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delay(100);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::unixDatestamp(){</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>now<sp/>=<sp/>RTC.now();</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>One<sp/>row<sp/>for<sp/>date<sp/>stamp;<sp/>the<sp/>next<sp/>for<sp/>real<sp/>header<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(now.unixtime());</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.println();</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;UNIX<sp/>time<sp/>stamp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>now<sp/>=<sp/>RTC.now();</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>datafile.print(now.unixtime());</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(now.unixtime());</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::endLine(){</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ends<sp/>the<sp/>line<sp/>in<sp/>the<sp/>file;<sp/>do<sp/>this<sp/>at<sp/>end<sp/>of<sp/>recording<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>going<sp/>back<sp/>to<sp/>sleep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>datafile.println();</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println();</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Logger::_vdivR(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Rref,<sp/>uint8_t<sp/>adc_bits,<sp/>\</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Rref_on_GND_side,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>oversample_debug){</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>as<sp/>public<sp/>vidvR<sp/>code,<sp/>but<sp/>returns<sp/>value<sp/>instead<sp/>of<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>saving<sp/>it<sp/>to<sp/>a<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_ADC;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_R;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>_ADC<sp/>=<sp/><ref refid="classLogger_1ad8296890a14a0df83c2433a20f25b899" kindref="member">analogReadOversample</ref>(pin,<sp/>adc_bits,<sp/>1,<sp/>oversample_debug);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_ADCnorm<sp/>=<sp/>_ADC/1023.0;<sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>to<sp/>0-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Rref_on_GND_side){</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Standard<sp/>case<sp/>for<sp/>the<sp/>provided<sp/>slots<sp/>for<sp/>reference<sp/>resistors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>_R<sp/>=<sp/>Rref/_ADCnorm<sp/>-<sp/>Rref;<sp/></highlight><highlight class="comment">//<sp/>R1<sp/>=<sp/>(R2*Vin)/Vout<sp/>-<sp/>R2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>could<sp/>happen<sp/>if<sp/>an<sp/>external<sp/>sensor<sp/>has<sp/>a<sp/>different<sp/>setup<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>its<sp/>known<sp/>and<sp/>unknown<sp/>resistors;<sp/>in<sp/>this<sp/>case,<sp/>place<sp/>the<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resistor<sp/>between<sp/>the<sp/>analog<sp/>pin<sp/>and<sp/>3V3.<sp/>(The<sp/>sensor,<sp/>internally,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>its<sp/>thermistor<sp/>connected<sp/>to<sp/>GND.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>_R<sp/>=<sp/>Rref<sp/>*<sp/>(1.<sp/>/<sp/>((1./_ADCnorm)<sp/>-<sp/>1.));<sp/></highlight><highlight class="comment">//<sp/>R2<sp/>=<sp/>R1*<sp/>(1<sp/>/<sp/>((Vin/Vout)<sp/>-<sp/>1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_R;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::RTCon(){</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>on<sp/>power<sp/>clock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>pinMode(SDpowerPin,OUTPUT);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>digitalWrite(SDpowerPin,HIGH);<sp/></highlight><highlight class="comment">//Chad<sp/>--<sp/>one<sp/>model&apos;s<sp/>pull-ups<sp/>attached<sp/>to<sp/>SDpowerPin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>digitalWrite(ClockPowerPin,HIGH);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>delay(20);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::RTCsleep(){</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>off<sp/>power<sp/>clock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>this<sp/>point,<sp/>it<sp/>runs<sp/>on<sp/>VCC<sp/>(if<sp/>logger<sp/>is<sp/>powered...<sp/>which<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>program<sp/>is<sp/>running)<sp/>via<sp/>the<sp/>backup<sp/>battery<sp/>power<sp/>supply.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>&quot;tricks&quot;<sp/>it<sp/>into<sp/>turning<sp/>off<sp/>its<sp/>I2C<sp/>bus<sp/>and<sp/>saves<sp/>power<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>board,<sp/>but<sp/>keeps<sp/>its<sp/>alarm<sp/>functionality<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(Idea<sp/>to<sp/>do<sp/>this<sp/>courtesy<sp/>of<sp/>Gerhard<sp/>Oberforcher)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>digitalWrite(SDpowerPin,LOW);<sp/></highlight><highlight class="comment">//Chad<sp/>--<sp/>one<sp/>model&apos;s<sp/>pull-ups<sp/>attached<sp/>to<sp/>SDpowerPin<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>digitalWrite(ClockPowerPin,LOW);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::SDpowerOn(){</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>digitalWrite(SDpowerPin,HIGH);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::SDpowerOff(){</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>digitalWrite(SDpowerPin,LOW);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="comment">//<sp/>PUBLIC<sp/>UTILITY<sp/>FUNCTIONS<sp/>TO<sp/>IMPLEMENT<sp/>LOGGER<sp/>IN<sp/>SKETCH<sp/>//</highlight></codeline>
<codeline lineno="1107"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1ad90ff8f29410f6b70cc6334391400a4e" kindref="member">Logger::sleep</ref>(){</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>IS_LOGGING<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>logging<sp/>when<sp/>sleeping!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>wdt_disable();<sp/><sp/></highlight><highlight class="comment">//Disable<sp/>the<sp/>watchdog<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>sleepNow();</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1ad28cf6450ada04f0e1475998bede5b88" kindref="member">Logger::goToSleep_if_needed</ref>(){</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_use_sleep_mode){</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLogger_1ad90ff8f29410f6b70cc6334391400a4e" kindref="member">sleep</ref>();</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a4a6c78dd1715b33ae4bbd6f66f116f77" kindref="member">Logger::startLogging</ref>(){</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wake<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>delay(50);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Serial.println(&quot;Rise<sp/>and<sp/>shine!&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>wdt_disable();</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>wdt_enable(WDTO_8S);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>the<sp/>watchdog<sp/>timer<sp/>interupt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>power<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/>SDpowerOn();</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>RTCon();</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>checkAlarms();<sp/></highlight><highlight class="comment">//Check<sp/>and<sp/>clear<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//displayAlarms();<sp/><sp/>//<sp/>Verify<sp/>Alarms<sp/>and<sp/>display<sp/>time<sp/>//<sp/>Here<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>why<sp/>the<sp/>alarms<sp/>weren&apos;t<sp/>going<sp/>off<sp/>after<sp/>1st<sp/>log.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mysterious<sp/>Serial.write<sp/>(or<sp/>.print)<sp/>fixed<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>check<sp/>if<sp/>there<sp/>was<sp/>a<sp/>bucket<sp/>tip<sp/>from<sp/>the<sp/>rain<sp/>gage,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NEW_RAIN_BUCKET_TIP){</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>TippingBucketRainGage();</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LOG_ALL_SENSORS_ON_BUCKET_TIP){</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>want<sp/>data<sp/>recorded<sp/>when<sp/>the<sp/>bucket<sp/>tips,<sp/>we<sp/>don&apos;t<sp/>want<sp/>it<sp/>to<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interrupt<sp/>a<sp/>current<sp/>logging<sp/>step.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>IS_LOGGING<sp/>will<sp/>just<sp/>stay<sp/>true<sp/>if<sp/>we&apos;re<sp/>interrupting<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IS_LOGGING<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>First<sp/>switch<sp/>the<sp/>IS_LOGGING<sp/>flag<sp/>because<sp/>we&apos;re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>doing<sp/>it<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>check<sp/>if<sp/>a<sp/>logging<sp/>event<sp/>is<sp/>supposed<sp/>to<sp/>occur</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>not<sp/>part<sp/>of<sp/>a<sp/>new<sp/>bucket<sp/>tip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IS_LOGGING<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_LOGGING<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>logger<sp/>has<sp/>been<sp/>awakend<sp/>by<sp/>someone<sp/>pushing<sp/>the<sp/>button</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>so,<sp/>bypass<sp/>everything<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Serial.println(&quot;LOG1!&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_model<sp/>==<sp/>bottle_logger<sp/>&amp;&amp;<sp/>(digitalRead(manualWakePin)<sp/>==<sp/>LOW)){</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Brief<sp/>light<sp/>flash<sp/>to<sp/>show<sp/>that<sp/>logging<sp/>is<sp/>happening</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Serial.println(&quot;LOG2!&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(LEDpin,<sp/>HIGH);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delay(5);<sp/></highlight><highlight class="comment">//<sp/>to<sp/>make<sp/>sure<sp/>tips<sp/>aren&apos;t<sp/>double-counted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(LEDpin,<sp/>LOW);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>now<sp/>note<sp/>that<sp/>it<sp/>is<sp/>logging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>pinMode(SDpowerPin,<sp/>OUTPUT);<sp/></highlight><highlight class="comment">//<sp/>Seemed<sp/>to<sp/>have<sp/>forgotten<sp/>between<sp/>loops...<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Callback<sp/>to<sp/>set<sp/>date<sp/>and<sp/>time<sp/>in<sp/>SD<sp/>card<sp/>file<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Following:<sp/>https://forum.arduino.cc/index.php?topic=348562.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See:<sp/>https://github.com/NorthernWidget/Logger/issues/6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>SdFile::dateTimeCallback(_internalDateTime);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>logger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sd.begin(CSpin,<sp/>SPI_HALF_SPEED))<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>use<sp/>Serial.println:<sp/>don&apos;t<sp/>kill<sp/>batteries<sp/>by<sp/>aborting<sp/>code<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Error<sp/>initializing<sp/>SD<sp/>card<sp/>for<sp/>writing&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WARN<sp/>THE<sp/>END<sp/>USER<sp/>--<sp/>new<sp/>feature<sp/>after<sp/>conversations<sp/>with<sp/>Amanda<sp/>and<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Crystal<sp/>about<sp/>SD<sp/>cards<sp/>not<sp/>being<sp/>seated<sp/>correctly,<sp/>and/or<sp/>just<sp/>not<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>knowing<sp/>if<sp/>they<sp/>are.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>LEDwarn(40);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/>delay(10);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Datestamp<sp/>the<sp/>start<sp/>of<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>unixDatestamp();</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1aa82814d61687debcf3b8dd6f46c9d549" kindref="member">Logger::endLogging</ref>(){</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/>endLine();</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//SDpowerOn();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>all<sp/>of<sp/>the<sp/>data<sp/>to<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>buffer<sp/>is<sp/>256<sp/>bytes,<sp/>I<sp/>think<sp/>--<sp/>so<sp/>need<sp/>to<sp/>use<sp/>this<sp/>in-between</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>are<sp/>too<sp/>many<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>datafile.sync();</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Headerfile<sp/>should<sp/>be<sp/>closed<sp/>at<sp/>this<sp/>point,<sp/>and<sp/>not<sp/>reopened</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>end_logging_to_headerfile();</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>first_log_after_booting_up<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>job<sp/>is<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>delay(30);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>THIS<sp/>DELAY<sp/>IS<sp/>***CRITICAL***<sp/>--<sp/>WITHOUT<sp/>IT,<sp/>THERE<sp/>IS<sp/>NOT<sp/>SUFFICIENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TIME<sp/>TO<sp/>WRITE<sp/>THE<sp/>DATA<sp/>TO<sp/>THE<sp/>SD<sp/>CARD!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>right<sp/>before<sp/>going<sp/>back<sp/>to<sp/>sleep<sp/>if<sp/>there<sp/>has<sp/>been<sp/>a<sp/>rain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gauge<sp/>bucket<sp/>tip<sp/>while<sp/>it<sp/>has<sp/>been<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>temporary<sp/>solution!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(May<sp/>be<sp/>able<sp/>to<sp/>reduce<sp/>delay<sp/>if<sp/>not<sp/>going<sp/>back<sp/>to<sp/>sleep<sp/>--<sp/>i.e.,<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>to<sp/>card<sp/>while<sp/>logging<sp/>next<sp/>step.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NEW_RAIN_BUCKET_TIP){</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>TippingBucketRainGage();</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;LOG!&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>better!<sp/>The<sp/>more<sp/>we<sp/>print,<sp/>the<sp/>harder<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>break<sp/>the<sp/>system!<sp/>(????!!!!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Serial.write(7);<sp/>//<sp/>Saved<sp/>by<sp/>another<sp/>print<sp/>statement.<sp/>That&apos;s<sp/>3...<sp/>there<sp/>must</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>a<sp/>reason!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Without<sp/>this,<sp/>pressing<sp/>the<sp/>&quot;LOG<sp/>NOW&quot;<sp/>button<sp/>would<sp/>often</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cause<sp/>the<sp/>system<sp/>to<sp/>freeze.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>advance_alarm_flag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_use_sleep_mode){</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>you<sp/>have<sp/>passed<sp/>your<sp/>logging<sp/>time<sp/>--<sp/>perhpas<sp/>the<sp/>LOG<sp/>NOW<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>button<sp/>was<sp/>pressed,<sp/>and<sp/>not<sp/>during<sp/>/<sp/>slightly<sp/>before<sp/>(and<sp/>blocking)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>time<sp/>for<sp/>the<sp/>next<sp/>logging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>now<sp/>=<sp/>RTC.now();</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Calculate<sp/>for<sp/>next<sp/>alarm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>seconds_in_day_now<sp/>=<sp/>now.hour()*3600<sp/>+<sp/>now.minute()*60<sp/>+<sp/>now.second();</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>second<sp/>padding<sp/>in<sp/>order<sp/>to<sp/>ensure<sp/>that<sp/>we<sp/>jump<sp/>to<sp/>the<sp/>next<sp/>alarm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sooner<sp/>rather<sp/>than<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>especially<sp/>for<sp/>the<sp/>use<sp/>of<sp/>the<sp/>LOG<sp/>NOW<sp/>button.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>seconds_in_day_alarm<sp/>=<sp/>(_hours*3600<sp/>+<sp/>_minutes*60<sp/>+<sp/>_seconds<sp/>-<sp/>1)<sp/>%<sp/>86400;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seconds_in_day_now<sp/>&lt;<sp/>seconds_in_day_alarm){</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>advance_alarm_flag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(advance_alarm_flag){</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>START<sp/>HERE!<sp/>MAKE<sp/>THIS<sp/>WORK<sp/>FOR<sp/>MIDNIGHT<sp/>ROLLOVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_hours<sp/>=<sp/>_hours+hourInterval;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_minutes<sp/>=<sp/>_minutes+minInterval;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_seconds<sp/>=<sp/>_seconds+secInterval;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_seconds<sp/>&gt;<sp/>59){_seconds<sp/>=<sp/>_seconds<sp/>-<sp/>60;<sp/>_minutes++;}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_minutes<sp/>&gt;<sp/>59){_minutes<sp/>=<sp/>_minutes<sp/>-<sp/>60;<sp/>_hours++;}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_hours<sp/>&gt;<sp/>23){_hours<sp/>=<sp/>_hours<sp/>-<sp/>24;}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alarm(_hours,<sp/>_minutes,<sp/>_seconds);<sp/><sp/></highlight><highlight class="comment">//Set<sp/>new<sp/>alarms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//displayAlarms();<sp/><sp/>//<sp/>Verify<sp/>Alarms<sp/>and<sp/>display<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>RTCsleep();</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>this<sp/>step,<sp/>since<sp/>everything<sp/>is<sp/>in<sp/>the<sp/>loop()<sp/>part<sp/>of<sp/>the<sp/>Arduino</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sketch,<sp/>the<sp/>sketch<sp/>will<sp/>cycle<sp/>back<sp/>back<sp/>to<sp/>sleep(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1af936c7f58e23316abb5614cbd31c7ced" kindref="member">Logger::startAnalog</ref>(){</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/>digitalWrite(SensorPowerPin,HIGH);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/>sbi(ADCSRA,ADEN);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>switch<sp/>Analog<sp/>to<sp/>Digitalconverter<sp/>ON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1adca7be8a63592263c67f63766680d16f" kindref="member">Logger::endAnalog</ref>(){</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>digitalWrite(SensorPowerPin,LOW);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="comment">//<sp/>SENSOR<sp/>INTERFACE<sp/>FUNCTIONS<sp/>//</highlight></codeline>
<codeline lineno="1322"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>analog<sp/>pin</highlight></codeline>
<codeline lineno="1325"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a343fcabefb37e06429865a2e6a6e708a" kindref="member">Logger::readPin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin){</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pinValue<sp/>=<sp/>analogRead(pin);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="1350"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Analog<sp/>pin<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>datafile.print(pinValue,<sp/>1);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>datafile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>Serial.print(pinValue,<sp/>1);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pinValue;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a4e67526c65fa865f276a515a200af4aa" kindref="member">Logger::readPinOversample</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits){</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pinValue<sp/>=<sp/><ref refid="classLogger_1ad8296890a14a0df83c2433a20f25b899" kindref="member">analogReadOversample</ref>(pin,<sp/>bits);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="1405"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Analog<sp/>pin<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/>datafile.print(pinValue,4);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>datafile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/>Serial.print(pinValue,4);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pinValue;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Thermistor<sp/>-<sp/>with<sp/>b-value</highlight></codeline>
<codeline lineno="1426"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a55d923b98a6c503fccb25bfd4af32f3d" kindref="member">Logger::thermistorB</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>R0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Rref,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T0degC,<sp/>\</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thermPin,<sp/>uint8_t<sp/>ADC_resolution_nbits,<sp/>\</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Rref_on_GND_side,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>oversample_debug,<sp/>\</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>record_results){</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Voltage<sp/>divider</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Rtherm<sp/>=<sp/>_vdivR(thermPin,<sp/>Rref,<sp/>ADC_resolution_nbits,<sp/>\</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rref_on_GND_side,<sp/>oversample_debug);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>B-value<sp/>thermistor<sp/>equations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T0<sp/>=<sp/>T0degC<sp/>+<sp/>273.15;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Rinf<sp/>=<sp/>R0*exp(-B/T0);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>B<sp/>/<sp/>log(Rtherm/Rinf);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>celsius</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>T<sp/>=<sp/>T<sp/>-<sp/>273.15;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="1500"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(record_results){</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Temperature<sp/>[degC]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>datafile.print(T,<sp/>4);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(T,<sp/>4);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>HTM2500LF<sp/>Humidity<sp/>and<sp/>Temperature<sp/>Sensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>TE<sp/>Connectivity<sp/>Measurement<sp/>Specialties</highlight></codeline>
<codeline lineno="1525"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a4ccff7a14a6bddc8bb28e22b3b36d3cc" kindref="member">Logger::HTM2500LF_humidity_temperature</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>humidPin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thermPin,<sp/>\</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Rref_therm,<sp/>uint8_t<sp/>ADC_resolution_nbits){</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>measure<sp/>these<sp/>pins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>fully<sp/>calculate<sp/>and<sp/>write<sp/>the<sp/>temperature<sp/>data,<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalized<sp/>to<sp/>0-1<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>V_humid_norm<sp/>=<sp/><ref refid="classLogger_1ad8296890a14a0df83c2433a20f25b899" kindref="member">analogReadOversample</ref>(humidPin,<sp/>ADC_resolution_nbits)<sp/>\</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/1023.;<sp/></highlight><highlight class="comment">//<sp/>0-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Commenting<sp/>out<sp/>low<sp/>and<sp/>high<sp/>temperature<sp/>readings;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>calculate<sp/>these<sp/>after<sp/>the<sp/>fact,<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>float<sp/>Tmin<sp/>=<sp/>thermistorB(10000,<sp/>3347,<sp/>Rref_therm,<sp/>25,<sp/>thermPin,<sp/>false,<sp/>false,<sp/>false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Ttyp<sp/>=<sp/><ref refid="classLogger_1a55d923b98a6c503fccb25bfd4af32f3d" kindref="member">thermistorB</ref>(10000,<sp/>3347,<sp/>Rref_therm,<sp/>25,<sp/>thermPin,<sp/>ADC_resolution_nbits,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//float<sp/>Tmax<sp/>=<sp/>thermistorB(10000,<sp/>3413,<sp/>Rref_therm,<sp/>25,<sp/>thermPin,<sp/>false,<sp/>false,<sp/>false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then,<sp/>convert<sp/>the<sp/>normalized<sp/>voltage<sp/>into<sp/>a<sp/>humidity<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>calibration<sp/>is<sp/>created<sp/>for<sp/>a<sp/>5V<sp/>input,<sp/>but<sp/>the<sp/>data<sp/>sheet<sp/>says<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>ratiometric,<sp/>so<sp/>I<sp/>think<sp/>I<sp/>will<sp/>just<sp/>renormalize<sp/>the<sp/>voltage<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pretend<sp/>that<sp/>it<sp/>is<sp/>5V<sp/>input<sp/>in<sp/>order<sp/>to<sp/>get<sp/>the<sp/>right<sp/>input<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>equation.<sp/>Just<sp/>multiply<sp/>by<sp/>5,<sp/>and<sp/>then<sp/>I<sp/>can<sp/>use<sp/>the<sp/>equation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>designed<sp/>for<sp/>5V!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>error<sp/>is<sp/>small,<sp/>and<sp/>has<sp/>a<sp/>small<sp/>effect<sp/>on<sp/>humidity<sp/>--<sp/>much<sp/>smaller<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>published<sp/>error<sp/>(see<sp/>data<sp/>sheet)<sp/>--<sp/>maybe<sp/>eventually<sp/>code<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>into<sp/>this<sp/>function.<sp/>So<sp/>just<sp/>use<sp/>typical<sp/>thermistor<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Vh<sp/>=<sp/>5000<sp/>*<sp/>V_humid_norm;<sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//float<sp/>Vh_real<sp/>=<sp/>3300<sp/>*<sp/>V_humid_norm;<sp/>//<sp/>switching<sp/>3.3V<sp/>basis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>RH<sp/>in<sp/>percent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>use<sp/>the<sp/>pow(base,<sp/>int)<sp/>function<sp/>or<sp/>do<sp/>multiplication<sp/>the<sp/>long<sp/>way...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>RH<sp/>=<sp/>(<sp/>(-1.9206E-9<sp/>*<sp/>Vh*Vh*Vh)<sp/>+<sp/>(1.437E-5<sp/>*<sp/>Vh*Vh)<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(3.421E-3<sp/>*<sp/>Vh)<sp/>-<sp/>12.4<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(1<sp/>+<sp/>(Ttyp<sp/>-<sp/>23)<sp/>*<sp/>2.4E-3);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="1595"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Relative<sp/>humidity<sp/>[%]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Temperature<sp/>[degC]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/>datafile.print(RH,<sp/>4);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/>datafile.print(Ttyp,<sp/>2);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>Serial.print(RH,<sp/>4);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/>datafile.print(Ttyp,<sp/>2);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="comment">//<sp/>HTM1500LF<sp/>Humidity<sp/>and<sp/>Temperature<sp/>Sensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>TE<sp/>Connectivity<sp/>Measurement<sp/>Specialties</highlight></codeline>
<codeline lineno="1622"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a62b74ddb3cf9fdd7dae2394c1b245ed4" kindref="member">Logger::HM1500LF_humidity_with_external_temperature</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>humidPin,<sp/>\</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>R0_therm,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>B_therm,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Rref_therm,<sp/>\</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T0degC_therm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thermPin_therm,<sp/>\</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ADC_resolution_nbits){</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>measure<sp/>these<sp/>pins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>fully<sp/>calculate<sp/>and<sp/>write<sp/>the<sp/>temperature<sp/>data,<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>V_humid_norm<sp/>=<sp/><ref refid="classLogger_1ad8296890a14a0df83c2433a20f25b899" kindref="member">analogReadOversample</ref>(humidPin,<sp/>ADC_resolution_nbits)/1023.;<sp/></highlight><highlight class="comment">//<sp/>0-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>write<sp/>temperature<sp/>to<sp/>file<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T<sp/>=<sp/><ref refid="classLogger_1a55d923b98a6c503fccb25bfd4af32f3d" kindref="member">thermistorB</ref>(R0_therm,<sp/>B_therm,<sp/>Rref_therm,<sp/>T0degC_therm,<sp/>\</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thermPin_therm,<sp/>ADC_resolution_nbits,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then,<sp/>convert<sp/>the<sp/>normalized<sp/>voltage<sp/>into<sp/>a<sp/>humidity<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>calibration<sp/>is<sp/>created<sp/>for<sp/>a<sp/>5V<sp/>input,<sp/>but<sp/>the<sp/>data<sp/>sheet<sp/>says<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>ratiometric,<sp/>so<sp/>I<sp/>think<sp/>I<sp/>will<sp/>just<sp/>renormalize<sp/>the<sp/>voltage<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pretend<sp/>that<sp/>it<sp/>is<sp/>5V<sp/>input<sp/>in<sp/>order<sp/>to<sp/>get<sp/>the<sp/>right<sp/>input<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>equation.<sp/>Just<sp/>multiply<sp/>by<sp/>5!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>error<sp/>is<sp/>small,<sp/>and<sp/>has<sp/>a<sp/>small<sp/>effect<sp/>on<sp/>humidity<sp/>--<sp/>much<sp/>smaller<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>published<sp/>error<sp/>(see<sp/>data<sp/>sheet)<sp/>--<sp/>maybe<sp/>eventually<sp/>code<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>into<sp/>this<sp/>function.<sp/>So<sp/>just<sp/>use<sp/>typical<sp/>thermistor<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Vh<sp/>=<sp/>5000<sp/>*<sp/>V_humid_norm;<sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//float<sp/>Vh_real<sp/>=<sp/>3300<sp/>*<sp/>V_humid_norm;<sp/>//<sp/>switching<sp/>3.3V<sp/>basis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>RH<sp/>in<sp/>percent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Got<sp/>to<sp/>use<sp/>the<sp/>pow(base,<sp/>int)<sp/>function<sp/>or<sp/>do<sp/>multiplication<sp/>the<sp/>long<sp/>way...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>RH_no_T_corr<sp/>=<sp/>(-1.91E-9<sp/>*<sp/>Vh*Vh*Vh)<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="1686"><highlight class="normal">+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1.33E-5<sp/>*<sp/>Vh*Vh)<sp/>+<sp/>(9.56E-3<sp/>*<sp/>Vh)<sp/>-<sp/>2.16E1;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>RH<sp/>=<sp/>RH_no_T_corr<sp/>+<sp/>0.05<sp/>*<sp/>(T<sp/>-<sp/>23);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="1692"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>normalized<sp/>0-1<sp/>voltage<sp/>in<sp/>case<sp/>my<sp/>5V<sp/>conversion<sp/>doesn&apos;t<sp/>work<sp/>the<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>think<sp/>it<sp/>will<sp/>--<sp/>though<sp/>if<sp/>it<sp/>is<sp/>ratiometric,<sp/>I<sp/>think<sp/>it<sp/>should.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Relative<sp/>humidity<sp/>[%]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//datafile.print(V_humid_norm);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//datafile.print(F(&quot;,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/>datafile.print(RH,<sp/>4);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Serial.print(V_humid_norm);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Serial.print(F(&quot;,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/>Serial.print(RH,<sp/>4);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MaxBotix<sp/>ruggedized<sp/>standard<sp/>size<sp/>ultrasonic<sp/>rangefinder:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>cm<sp/>=<sp/>1<sp/>10-bit<sp/>ADC<sp/>interval</highlight></codeline>
<codeline lineno="1720"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a362a1462166d63ddc613eaa1e86f9854" kindref="member">Logger::ultrasonicMB_analog_1cm</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nping,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sonicPin,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writeAll){</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>range;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>most<sp/>recent<sp/>returned<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ranges[nping];<sp/></highlight><highlight class="comment">//<sp/>Array<sp/>of<sp/>returned<sp/>ranges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sumRange<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>sum<sp/>of<sp/>the<sp/>ranges<sp/>measured</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>meanRange;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>average<sp/>range<sp/>over<sp/>all<sp/>the<sp/>pings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Serial.println();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>range<sp/>measurements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>rid<sp/>of<sp/>any<sp/>trash;<sp/>Serial.flush()<sp/>unnecessary;<sp/>main<sp/>thing<sp/>that<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>important<sp/>is<sp/>getting<sp/>the<sp/>2<sp/>pings<sp/>of<sp/>junk<sp/>out<sp/>of<sp/>the<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/>Serial.flush();</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=2;<sp/>i++){</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Ex<sp/>!=<sp/>99){</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(Ex,HIGH);</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay(1);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(Ex,LOW);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(100);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;i&lt;=nping;i++){</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Ex<sp/>!=<sp/>99){</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(Ex,HIGH);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay(1);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(Ex,LOW);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(100);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>range<sp/>=<sp/>analogRead(sonicPin);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/>ranges[i-1]<sp/>=<sp/>range;<sp/></highlight><highlight class="comment">//<sp/>10-bit<sp/>ADC<sp/>value<sp/>=<sp/>range<sp/>in<sp/>cm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C<sp/>is<sp/>0-indexed,<sp/>hence<sp/>the<sp/>&quot;-1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writeAll){</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Distance<sp/>[cm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(range);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SDpowerOn();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>datafile.print(range);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SDpowerOff();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/>sumRange<sp/>+=<sp/>range;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>mean<sp/>of<sp/>range<sp/>measurements<sp/>from<sp/>sumRange<sp/>and<sp/>nping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/>meanRange<sp/>=<sp/>sumRange/nping;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>standard<sp/>deviation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sumsquares<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigma;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;nping;i++){</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>the<sp/>squares<sp/>of<sp/>the<sp/>differences<sp/>from<sp/>the<sp/>mean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/>sumsquares<sp/>+=<sp/>square(ranges[i]-meanRange);</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>stdev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/>sigma<sp/>=<sp/>sqrt(sumsquares/nping);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="1821"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>delay(10);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Mean<sp/>distance<sp/>[cm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Standard<sp/>deviation<sp/>distance<sp/>[cm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/>datafile.print(meanRange);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/>datafile.print(sigma);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/>Serial.print(meanRange);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/>Serial.print(sigma);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a3ce2869bbd48fdebbf44e155981c85b0" kindref="member">Logger::maxbotixHRXL_WR_analog</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nping,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sonicPin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EX,<sp/>\</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writeAll,<sp/>\</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ADC_resolution_nbits){</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>range;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>most<sp/>recent<sp/>returned<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ranges[nping];<sp/></highlight><highlight class="comment">//<sp/>Array<sp/>of<sp/>returned<sp/>ranges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sumRange<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>sum<sp/>of<sp/>the<sp/>ranges<sp/>measured</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>meanRange;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>average<sp/>range<sp/>over<sp/>all<sp/>the<sp/>pings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sp;<sp/></highlight><highlight class="comment">//<sp/>analog<sp/>reading<sp/>of<sp/>sonic<sp/>pin;<sp/>probably<sp/>unnecessary,<sp/>but<sp/>Arduino<sp/>warns<sp/>against<sp/>having<sp/>too<sp/>many<sp/>fcns<sp/>w/<sp/>artihmetic,<sp/>I<sp/>think</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>range<sp/>measurements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>rid<sp/>of<sp/>any<sp/>trash;<sp/>Serial.flush()<sp/>unnecessary;<sp/>main<sp/>thing<sp/>that<sp/>is<sp/>important<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>getting<sp/>the<sp/>2<sp/>pings<sp/>of<sp/>junk<sp/>out<sp/>of<sp/>the<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/>Serial.flush();</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=2;<sp/>i++){</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(EX<sp/>!=<sp/>99){</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(EX,HIGH);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay(1);</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(EX,LOW);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(100);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/>sp<sp/>=<sp/>analogRead(sonicPin);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;i&lt;=nping;i++){</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(EX<sp/>!=<sp/>99){</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(EX,HIGH);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay(1);</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitalWrite(EX,LOW);</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(100);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>analogRead(sonicPin);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>range<sp/>=<sp/>(sp<sp/>+<sp/>1)<sp/>*<sp/>5;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>ranges[i-1]<sp/>=<sp/>range;<sp/></highlight><highlight class="comment">//<sp/>10-bit<sp/>ADC<sp/>value<sp/>(1--1024)<sp/>*<sp/>5<sp/>=<sp/>range<sp/>in<sp/>mm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C<sp/>is<sp/>0-indexed,<sp/>hence<sp/>the<sp/>&quot;-1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writeAll){</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Distance<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(range,<sp/>0);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SDpowerOn();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>datafile.print(range,<sp/>0);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SDpowerOff();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/>sumRange<sp/>+=<sp/>range;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>mean<sp/>of<sp/>range<sp/>measurements<sp/>from<sp/>sumRange<sp/>and<sp/>nping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/>meanRange<sp/>=<sp/>sumRange/nping;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>standard<sp/>deviation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sumsquares<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigma;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;nping;i++){</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>the<sp/>squares<sp/>of<sp/>the<sp/>differences<sp/>from<sp/>the<sp/>mean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/>sumsquares<sp/>+=<sp/>square(ranges[i]-meanRange);</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>stdev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/>sigma<sp/>=<sp/>sqrt(sumsquares/nping);</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="1955"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Mean<sp/>distance<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Standard<sp/>deviation<sp/>distance<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/>datafile.print(meanRange);</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/>datafile.print(sigma);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/>Serial.print(meanRange);</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/>Serial.print(sigma);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a87ce56cb9c3dfc7abfd6308b2ee7dc10" kindref="member">Logger::maxbotixHRXL_WR_Serial</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>npings,<sp/>\</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writeAll,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxRange,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RS232){</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stores<sp/>the<sp/>ranging<sp/>output<sp/>from<sp/>the<sp/>MaxBotix<sp/>sensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myranges[npings];<sp/></highlight><highlight class="comment">//<sp/>Declare<sp/>an<sp/>array<sp/>to<sp/>store<sp/>the<sp/>ranges<sp/>[mm]<sp/>//<sp/>Should<sp/>be<sp/>int,<sp/>but<sp/>float<sp/>for<sp/>passing<sp/>to<sp/>fcns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>nodata<sp/>value<sp/>-<sp/>5000<sp/>or<sp/>9999<sp/>based<sp/>on<sp/>logger<sp/>max<sp/>range<sp/>(in<sp/>meters)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>have<sp/>also<sp/>made<sp/>0<sp/>a<sp/>nodata<sp/>value,<sp/>because<sp/>it<sp/>appears<sp/>sometimes<sp/>and<sp/>shouldn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(minimum<sp/>range<sp/>=<sp/>300<sp/>mm)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodata_value;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxRange<sp/>==<sp/>5){<sp/></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/>nodata_value<sp/>=<sp/>5000;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxRange<sp/>==<sp/>10){</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>nodata_value<sp/>=<sp/>9999;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>all<sp/>of<sp/>the<sp/>range<sp/>values<sp/>in<sp/>the<sp/>array<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;npings;<sp/>i++){</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>add<sp/>int<sp/>Rx<sp/>to<sp/>use<sp/>this;<sp/>currently,<sp/>don&apos;t<sp/>trust<sp/>SoftwareSerial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>myranges[i]<sp/>=<sp/>maxbotix_soft_Serial_parse(Ex,<sp/>Rx,<sp/>RS232);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/>myranges[i]<sp/>=<sp/>maxbotix_Serial_parse(Ex);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>get<sp/>the<sp/>mean<sp/>and<sp/>standard<sp/>deviation<sp/>of<sp/>all<sp/>of<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>npings_with_nodata_returns<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>sum_of_good_ranges<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>good_ranges[npings];</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;npings;<sp/>i++){</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(myranges[i]<sp/>!=<sp/>nodata_value<sp/>&amp;&amp;<sp/>myranges[i]<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum_of_good_ranges<sp/>+=<sp/>myranges[i];</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>good_ranges[j]<sp/>=<sp/>myranges[i];</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>npings_with_nodata_returns<sp/>++;</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>npings_with_real_returns<sp/>=<sp/>npings<sp/>-<sp/>npings_with_nodata_returns;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mean_range;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>standard_deviation;</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>div0<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(npings_with_real_returns<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/>mean_range<sp/>=<sp/>sum_of_good_ranges<sp/>/<sp/>npings_with_real_returns;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/>standard_deviation<sp/>=<sp/>standard_deviation_from_array(good_ranges,<sp/>npings_with_real_returns,<sp/>mean_range);</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/>mean_range<sp/>=<sp/>-9999;</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/>standard_deviation<sp/>=<sp/>-9999;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>all<sp/>values<sp/>if<sp/>so<sp/>desired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writeAll){</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;npings;<sp/>i++){</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>datafile.print(myranges[i]);</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(myranges[i]);</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="2077"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Mean<sp/>distance<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Standard<sp/>deviation<sp/>distance<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>readings<sp/>with<sp/>non-error<sp/>returns&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Always<sp/>write<sp/>the<sp/>mean,<sp/>standard<sp/>deviation,<sp/>and<sp/>number<sp/>of<sp/>good<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/>datafile.print(mean_range);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/>datafile.print(standard_deviation);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/>datafile.print(npings_with_real_returns);</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/>Serial.print(mean_range);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/>Serial.print(standard_deviation);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/>Serial.print(npings_with_real_returns);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>mean<sp/>range<sp/>for<sp/>functions<sp/>that<sp/>need<sp/>it,<sp/>e.g.,<sp/>to<sp/>trigger<sp/>camera</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mean_range;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Logger::standard_deviation_from_array(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>values[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvalues,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mean){</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sumsquares<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nvalues;<sp/>i++){</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>sumsquares<sp/>+=<sp/>square(values[i]<sp/>-<sp/>mean);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(sumsquares/nvalues);</highlight></codeline>
<codeline lineno="2114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Logger::standard_deviation_from_array(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>values[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvalues,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mean){</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sumsquares<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nvalues;<sp/>i++){</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/>sumsquares<sp/>+=<sp/>square(values[i]<sp/>-<sp/>mean);</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(sumsquares/nvalues);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Logger::maxbotix_Serial_parse(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ex){</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>Currently<sp/>assumes<sp/>only<sp/>one<sp/>Serial<sp/>port.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Excites<sp/>the<sp/>MaxBotix<sp/>sensor<sp/>and<sp/>receives<sp/>its<sp/>ranging<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>range[7];<sp/></highlight><highlight class="comment">//<sp/>R####&lt;\r&gt;,<sp/>so<sp/>R<sp/>+<sp/>4<sp/>chars<sp/>+<sp/>carriage<sp/>return<sp/>+<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/>Serial.end();<sp/></highlight><highlight class="comment">//<sp/>End<sp/>38400<sp/>bps<sp/>computer<sp/>comms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/>Serial.begin(9600);<sp/></highlight><highlight class="comment">//<sp/>Start<sp/>9600<sp/>bps<sp/>logger<sp/>comms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Excite<sp/>the<sp/>sensor<sp/>to<sp/>produce<sp/>a<sp/>pulse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/>pinMode(Ex,<sp/>OUTPUT);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/>digitalWrite(Ex,<sp/>HIGH);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/>delay(1);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/>digitalWrite(Ex,<sp/>LOW);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>the<sp/>result<sp/>of<sp/>the<sp/>ranging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/></highlight><highlight class="comment">//<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>sure<sp/>if<sp/>this<sp/>will<sp/>work<sp/>-<sp/>maybe<sp/>loop<sp/>around<sp/>to<sp/>the<sp/>other<sp/>end<sp/>of<sp/>the<sp/>array?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(range[i-1]<sp/>!=<sp/>13){</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Serial.available()){</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>range[i]<sp/>=<sp/>Serial.read();</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/>Serial.end();</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/>Serial.begin(38400);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>r2[4];<sp/></highlight><highlight class="comment">//<sp/>range<sp/>stripped<sp/>of<sp/>all<sp/>of<sp/>its<sp/>extra<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;5;<sp/>i++){</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[i-1]<sp/>=<sp/>range[i];</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r3<sp/>=<sp/>atol(r2);</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r3;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2156"><highlight class="comment">//<sp/>CURRENTLY<sp/>NOT<sp/>USED<sp/>--<sp/>ADW<sp/>DOES<sp/>NOT<sp/>TRUST<sp/>SOFTWARE<sp/>SERIAL<sp/>TO<sp/>MAINTAIN</highlight></codeline>
<codeline lineno="2157"><highlight class="comment">//<sp/>TIMING<sp/>(AND<sp/>NOT<sp/>HANG)</highlight></codeline>
<codeline lineno="2158"><highlight class="comment">int<sp/>Logger::maxbotix_soft_Serial_parse(int<sp/>Ex,<sp/>int<sp/>Rx,<sp/>bool<sp/>RS232){</highlight></codeline>
<codeline lineno="2159"><highlight class="comment"><sp/><sp/>//<sp/>Excites<sp/>the<sp/>MaxBotix<sp/>sensor<sp/>and<sp/>receives<sp/>its<sp/>ranging<sp/>output</highlight></codeline>
<codeline lineno="2160"><highlight class="comment"><sp/><sp/>char<sp/>range[7];<sp/>//<sp/>R####&lt;\r&gt;,<sp/>so<sp/>R<sp/>+<sp/>4<sp/>chars<sp/>+<sp/>carriage<sp/>return<sp/>+<sp/>null</highlight></codeline>
<codeline lineno="2161"><highlight class="comment"><sp/><sp/>SoftwareSerial<sp/>mySerial(Rx,<sp/>-1,<sp/>RS232);<sp/>//<sp/>RX,<sp/>TX,<sp/>inverse<sp/>logic<sp/>-<sp/>RS232<sp/>true,<sp/>TTL<sp/>false;<sp/>defaults<sp/>to<sp/>TTL<sp/>(false)</highlight></codeline>
<codeline lineno="2162"><highlight class="comment"><sp/><sp/>mySerial.begin(9600);</highlight></codeline>
<codeline lineno="2163"><highlight class="comment"><sp/><sp/>//Excite<sp/>the<sp/>sensor<sp/>to<sp/>produce<sp/>a<sp/>pulse</highlight></codeline>
<codeline lineno="2164"><highlight class="comment"><sp/><sp/>pinMode(Ex,<sp/>OUTPUT);</highlight></codeline>
<codeline lineno="2165"><highlight class="comment"><sp/><sp/>digitalWrite(Ex,<sp/>HIGH);</highlight></codeline>
<codeline lineno="2166"><highlight class="comment"><sp/><sp/>delay(1);</highlight></codeline>
<codeline lineno="2167"><highlight class="comment"><sp/><sp/>digitalWrite(Ex,<sp/>LOW);</highlight></codeline>
<codeline lineno="2168"><highlight class="comment"><sp/><sp/>//<sp/>Record<sp/>the<sp/>result<sp/>of<sp/>the<sp/>ranging</highlight></codeline>
<codeline lineno="2169"><highlight class="comment"><sp/><sp/>int<sp/>i=0;<sp/>//<sp/>counter</highlight></codeline>
<codeline lineno="2170"><highlight class="comment"><sp/><sp/>//<sp/>Not<sp/>sure<sp/>if<sp/>this<sp/>will<sp/>work<sp/>-<sp/>maybe<sp/>loop<sp/>around<sp/>to<sp/>the<sp/>other<sp/>end<sp/>of<sp/>the<sp/>array?</highlight></codeline>
<codeline lineno="2171"><highlight class="comment"><sp/><sp/>while<sp/>(range[i-1]<sp/>!=<sp/>13){</highlight></codeline>
<codeline lineno="2172"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(mySerial.available()){</highlight></codeline>
<codeline lineno="2173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>range[i]<sp/>=<sp/>mySerial.read();</highlight></codeline>
<codeline lineno="2174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2175"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2176"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2177"><highlight class="comment"><sp/><sp/>//Serial.print(range);</highlight></codeline>
<codeline lineno="2178"><highlight class="comment"><sp/><sp/>//<sp/>Convert<sp/>to<sp/>integer</highlight></codeline>
<codeline lineno="2179"><highlight class="comment"><sp/><sp/>char<sp/>r2[4];<sp/>//<sp/>range<sp/>stripped<sp/>of<sp/>all<sp/>of<sp/>its<sp/>extra<sp/>characters</highlight></codeline>
<codeline lineno="2180"><highlight class="comment"><sp/><sp/>for<sp/>(int<sp/>i=1;<sp/>i&lt;5;<sp/>i++){</highlight></codeline>
<codeline lineno="2181"><highlight class="comment"><sp/><sp/><sp/><sp/>r2[i-1]<sp/>=<sp/>range[i];</highlight></codeline>
<codeline lineno="2182"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2183"><highlight class="comment"><sp/><sp/>int<sp/>r3<sp/>=<sp/>atol(r2);</highlight></codeline>
<codeline lineno="2184"><highlight class="comment"><sp/><sp/>//Serial.print(&quot;,<sp/>&quot;);</highlight></codeline>
<codeline lineno="2185"><highlight class="comment"><sp/><sp/>//Serial.print(r3);</highlight></codeline>
<codeline lineno="2186"><highlight class="comment"><sp/><sp/>//Serial.print(&quot;;<sp/>&quot;);</highlight></codeline>
<codeline lineno="2187"><highlight class="comment"><sp/><sp/>return<sp/>r3;</highlight></codeline>
<codeline lineno="2188"><highlight class="comment"><sp/><sp/>//return<sp/>atol(r2);<sp/>//<sp/>Return<sp/>integer<sp/>values<sp/>in<sp/>mm;<sp/>no<sp/>parsing<sp/>of<sp/>error<sp/>values</highlight></codeline>
<codeline lineno="2189"><highlight class="comment">}</highlight></codeline>
<codeline lineno="2190"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a80fdea5a339573980f9544ac64678411" kindref="member">Logger::Inclinometer_SCA100T_D02_analog_Tcorr</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xPin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yPin,<sp/>\</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Vref,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Vsupply,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>R0_therm,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>B_therm,<sp/>\</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Rref_therm,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T0degC_therm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thermPin_therm,<sp/>\</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ADC_resolution_nbits){</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Vout_x<sp/>=<sp/>(<ref refid="classLogger_1ad8296890a14a0df83c2433a20f25b899" kindref="member">analogReadOversample</ref>(xPin,<sp/>ADC_resolution_nbits)<sp/>/<sp/>1023.)<sp/>\</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Vref;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Vout_y<sp/>=<sp/>(<ref refid="classLogger_1ad8296890a14a0df83c2433a20f25b899" kindref="member">analogReadOversample</ref>(yPin,<sp/>ADC_resolution_nbits)<sp/>/<sp/>1023.)<sp/>\</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Vref;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Offset<sp/>=<sp/>Vsupply/2.;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Sensitivity<sp/>=<sp/>2.;</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Temperature<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T<sp/>=<sp/><ref refid="classLogger_1a55d923b98a6c503fccb25bfd4af32f3d" kindref="member">thermistorB</ref>(R0_therm,<sp/>B_therm,<sp/>Rref_therm,<sp/>T0degC_therm,<sp/>\</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thermPin_therm,<sp/>ADC_resolution_nbits,<sp/>\</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sensitivity<sp/>correction<sp/>for<sp/>Scorr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Scorr<sp/>=<sp/>-0.00011<sp/>*<sp/>T*T<sp/>+<sp/>0.0022<sp/>*<sp/>T<sp/>+<sp/>0.0408;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Sensitivity_compensated<sp/>=<sp/>Sensitivity<sp/>*<sp/>(<sp/>1<sp/>+<sp/>Scorr/100.);</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_x_radians<sp/>=<sp/>asin(<sp/>(Vout_x<sp/>-<sp/>Offset)/Sensitivity_compensated<sp/>);</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_y_radians<sp/>=<sp/>asin(<sp/>(Vout_y<sp/>-<sp/>Offset)/Sensitivity_compensated<sp/>);</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_x_degrees<sp/>=<sp/>180./3.14159<sp/>*<sp/>angle_x_radians;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_y_degrees<sp/>=<sp/>180./3.14159<sp/>*<sp/>angle_y_radians;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="2270"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Inclinometer<sp/>voltage<sp/>(x-axis)<sp/>[V]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Inclinometer<sp/>voltage<sp/>(y-axis)<sp/>[V]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Inclinometer<sp/>tilt<sp/>(x-axis)<sp/>[degrees]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Inclinometer<sp/>tilt<sp/>(y-axis)<sp/>[degrees]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/>datafile.print(Vout_x);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/>datafile.print(Vout_y);</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/>datafile.print(angle_x_degrees);</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/>datafile.print(angle_y_degrees);</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>a<sp/>=<sp/>analogRead(xPin)<sp/>-<sp/>512;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>b<sp/>=<sp/>analogRead(yPin)<sp/>-<sp/>512;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Serial.print(a);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Serial.print(F(&quot;,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Serial.print(b);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Serial.print(F(&quot;,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Serial.print(VDD);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Serial.print(F(&quot;,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/>Serial.print(Vout_x);</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/>Serial.print(Vout_y);</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/>Serial.print(angle_x_degrees);</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/>Serial.print(angle_y_degrees);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a6c6a43a1b86f88c2a5e33d14c992e510" kindref="member">Logger::Anemometer_reed_switch</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interrupt_pin_number,<sp/>\</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>reading_duration_milliseconds,<sp/>\</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>meters_per_second_per_rotation){</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>plan<sp/>for<sp/>no<sp/>more<sp/>than<sp/>40<sp/>Hz<sp/>(100<sp/>mph),<sp/>so<sp/>will<sp/>have<sp/>a<sp/>delay<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>10<sp/>ms<sp/>between<sp/>rotations<sp/>to<sp/>debounce<sp/>the<sp/>input.<sp/>This<sp/>should<sp/>allow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>up<sp/>to<sp/>250<sp/>mph,<sp/>at<sp/>which<sp/>point<sp/>larger<sp/>problems<sp/>likely<sp/>exist...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>up:<sp/>http://arduino.stackexchange.com/questions/12587/how-can-i-handle-the-millis-rollover</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/>rotation_count<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Global<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>rotation_count_local;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rotation_Hz;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>wind_speed_meters_per_second;</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reading_duration_seconds<sp/>=<sp/>reading_duration_milliseconds<sp/>/<sp/>1000.;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/>pinMode(interrupt_pin_number,<sp/>INPUT);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/>digitalWrite(interrupt_pin_number,<sp/>HIGH);</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>millis_start<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/>attachInterrupt(digitalPinToInterrupt(interrupt_pin_number),<sp/>\</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_anemometer_count_increment,<sp/>FALLING);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>rollovers<sp/>by<sp/>comparing<sp/>unsigned<sp/>integers<sp/>with<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>number<sp/>of<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>in<sp/>while<sp/>loop<sp/>while<sp/>interrupt<sp/>can<sp/>increment<sp/>counter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(millis()<sp/>-<sp/>millis_start<sp/>&lt;=<sp/>reading_duration_milliseconds){</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Well,<sp/>this<sp/>is<sp/>weird,<sp/>but<sp/>required<sp/>to<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/>detachInterrupt(digitalPinToInterrupt(interrupt_pin_number));</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/>rotation_Hz<sp/>=<sp/>rotation_count<sp/>/<sp/>reading_duration_seconds;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/>wind_speed_meters_per_second<sp/>=<sp/>rotation_Hz<sp/>*<sp/>meters_per_second_per_rotation;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="2380"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>rotations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Rotation<sp/>frequency<sp/>[Hz]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Wind<sp/>speed<sp/>[m/s]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>should<sp/>estimate<sp/>error<sp/>based<sp/>on<sp/>+/-<sp/>1<sp/>rotation<sp/>(depending<sp/>on<sp/>whether<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>starting<sp/>or<sp/>just<sp/>ending<sp/>at<sp/>the<sp/>measurement<sp/>start<sp/>time)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/>datafile.print(rotation_count);</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/>datafile.print(rotation_Hz,<sp/>4);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/>datafile.print(wind_speed_meters_per_second,<sp/>4);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/>Serial.print(rotation_count);</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/>Serial.print(rotation_Hz,<sp/>4);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/>Serial.print(wind_speed_meters_per_second,<sp/>4);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a31c3cba5ff5722fb66bf540bfbe8b25d" kindref="member">Logger::Wind_Vane_Inspeed</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vanePin){</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Vin_normalized<sp/>=<sp/>(analogRead(vanePin)<sp/>/<sp/>1023.);</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Vin_stretched<sp/>=<sp/>(Vin_normalized<sp/>-<sp/>0.05)<sp/>/<sp/>0.9;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Wind_angle<sp/>=<sp/>Vin_stretched<sp/>*<sp/>360.;<sp/></highlight><highlight class="comment">//<sp/>Degrees<sp/>--<sp/>azimuth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="2445"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/>datafile.print(Wind_angle);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/>Serial.print(Wind_angle);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1ae4190ce7ccfd7b148a6151102a3bf93d" kindref="member">Logger::Pyranometer</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>analogPin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>raw_mV_per_W_per_m2,<sp/>\</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gain,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>V_ref,<sp/>\</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ADC_resolution_nbits){</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>V</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Vref<sp/>V<sp/>--&gt;<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Vin<sp/>=<sp/>(<ref refid="classLogger_1ad8296890a14a0df83c2433a20f25b899" kindref="member">analogReadOversample</ref>(analogPin,<sp/>ADC_resolution_nbits)<sp/>/<sp/>1023.)<sp/>\</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>V_ref<sp/>*<sp/>1000.;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//float<sp/>Vin<sp/>=<sp/>V_ref<sp/>*<sp/>1000.<sp/>*<sp/>analogRead(analogPin)<sp/>/<sp/>1023.;<sp/>//<sp/>No<sp/>oversampling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Radiation_W_m2<sp/>=<sp/>Vin<sp/>/<sp/>(raw_mV_per_W_per_m2<sp/>*<sp/>gain);</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="2502"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Radiation<sp/>[W/m^2]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/>datafile.print(Radiation_W_m2,<sp/>4);</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/>Serial.print(Radiation_W_m2,<sp/>4);</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classLogger_1ad8296890a14a0df83c2433a20f25b899" kindref="member">Logger::analogReadOversample</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin,<sp/>uint8_t<sp/>adc_bits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nsamples,</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debug){</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(debug){</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/>start_logging_to_otherfile(</highlight><highlight class="stringliteral">&quot;Oversample.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>analog_reading;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/>uint8_t<sp/>n<sp/>=<sp/>adc_bits<sp/>-<sp/>10;<sp/></highlight><highlight class="comment">//&quot;rightshift&quot;<sp/>value,<sp/>AKA:<sp/>&quot;n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Bit<sp/>shift<sp/>to<sp/>calculate<sp/>4^n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(Best<sp/>and<sp/>fastest<sp/>method<sp/>to<sp/>calculate<sp/>4<sp/>to<sp/>a<sp/>power)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>oversample_num<sp/>=<sp/>1UL&lt;&lt;(2*n);</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Bit<sp/>shift<sp/>to<sp/>calculate<sp/>2^n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>divisor<sp/>=<sp/>1&lt;&lt;n;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//outer<sp/>loop:<sp/>get<sp/>the<sp/>number<sp/>of<sp/>samples<sp/>to<sp/>avg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>reading_sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nsamples;<sp/>i++)</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//inner<sp/>loop:<sp/>do<sp/>oversampling,<sp/>per<sp/>AVR121<sp/>Application<sp/>Note,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>order<sp/>to<sp/>enhance<sp/>resolution<sp/>of<sp/>10-bit<sp/>ADC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>inner_sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;oversample_num;<sp/>j++)</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inner_sum<sp/>+=<sp/>analogRead(pin);<sp/></highlight><highlight class="comment">//take<sp/>a<sp/>10-bit<sp/>reading<sp/>on<sp/>the<sp/>Arduino<sp/>ADC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(debug){</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(analogRead(pin));</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Convert<sp/>these<sp/>many<sp/>10-bit<sp/>samples<sp/>to<sp/>a<sp/>single<sp/>higher-resolution<sp/>sample:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Standard<sp/>Method:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>reading<sp/>=<sp/>inner_sum<sp/>&gt;&gt;<sp/>n;<sp/>//See<sp/>AVR121<sp/>Application<sp/>Note</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Rounding<sp/>Method<sp/>(to<sp/>nearest<sp/>integer):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>reading<sp/>=<sp/>(inner_sum<sp/>+<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long)divisor/2UL)<sp/>&gt;&gt;<sp/>n;</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/>reading_sum<sp/>+=<sp/>reading;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>avg_reading<sp/>=<sp/>(float)reading_sum/(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)nsamples;</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>to<sp/>10<sp/>bits<sp/>for<sp/>all<sp/>of<sp/>the<sp/>stuff<sp/>here<sp/>that<sp/>expects<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>precision_above_ten<sp/>=<sp/>pow(2.,<sp/>adc_bits<sp/>-<sp/>10.);</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/>analog_reading<sp/>=<sp/>avg_reading<sp/>/<sp/>precision_above_ten;<sp/></highlight><highlight class="comment">//<sp/>0-1023,<sp/>but<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>analog_reading;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a40588117a274f0c6de926ef6ce1f0ba8" kindref="member">Logger::Barometer_BMP180</ref>(){</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/>SFE_BMP180<sp/>pressure;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T;</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pressure.begin())</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>temperature<sp/>measurement<sp/>is<sp/>needed<sp/>to<sp/>calibrate<sp/>a<sp/>pressure<sp/>reading.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>a<sp/>temperature<sp/>measurement:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>request<sp/>is<sp/>successful,<sp/>the<sp/>number<sp/>of<sp/>ms<sp/>to<sp/>wait<sp/>is<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>request<sp/>is<sp/>unsuccessful,<sp/>0<sp/>is<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>pressure.startTemperature();</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(status);<sp/><sp/></highlight><highlight class="comment">//Wait<sp/>for<sp/>the<sp/>measurement<sp/>to<sp/>complete:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>completed<sp/>temperature<sp/>measurement:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>measurement<sp/>is<sp/>stored<sp/>in<sp/>the<sp/>variable<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>returns<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>if<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>pressure.getTemperature(T);</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>a<sp/>pressure<sp/>measurement:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>parameter<sp/>is<sp/>the<sp/>oversampling<sp/>setting,<sp/>from<sp/>0<sp/>to<sp/>3<sp/>(highest<sp/>res,<sp/>longest<sp/>wait).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>request<sp/>is<sp/>successful,<sp/>the<sp/>number<sp/>of<sp/>ms<sp/>to<sp/>wait<sp/>is<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>request<sp/>is<sp/>unsuccessful,<sp/>0<sp/>is<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>pressure.startPressure(3);</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay(status);<sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>measurement<sp/>to<sp/>complete:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>completed<sp/>pressure<sp/>measurement:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>measurement<sp/>is<sp/>stored<sp/>in<sp/>the<sp/>variable<sp/>P.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>also<sp/>that<sp/>the<sp/>function<sp/>requires<sp/>the<sp/>previous<sp/>temperature<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>measurement<sp/>(T).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(If<sp/>temperature<sp/>is<sp/>stable,<sp/>you<sp/>can<sp/>do<sp/>one<sp/>temperature<sp/>measurement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>a<sp/>number<sp/>of<sp/>pressure<sp/>measurements.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>returns<sp/>1<sp/>if<sp/>successful,<sp/>0<sp/>if<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>pressure.getPressure(P,T);</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="2673"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Barometric<sp/>pressure<sp/>[hPa]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//datafile.print(T);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//datafile.print(F(&quot;,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datafile.print(P,2);</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Serial.print(T);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Serial.print(F(&quot;,&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(P);</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Er<sp/>retrieve<sp/>P&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Er<sp/>start<sp/>P&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Er<sp/>retrieve<sp/>T&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Er<sp/>start<sp/>T&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;BMP180<sp/>init<sp/>fail&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"></highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>this<sp/>is<sp/>currnetly<sp/>not<sp/>printing<sp/>to<sp/>header<sp/>or<sp/>results<sp/>if<sp/>it<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>working;<sp/>it<sp/>is<sp/>like<sp/>it<sp/>is<sp/>not<sp/>even<sp/>there<sp/>in<sp/>this<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a98f3cc370c87d1e1eaf3eb6a7e0f1623" kindref="member">Logger::_sensor_function_template</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>param1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>param2,<sp/></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ADC_bits,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag){</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Vout_normalized_analog_example<sp/>=<sp/><ref refid="classLogger_1ad8296890a14a0df83c2433a20f25b899" kindref="member">analogReadOversample</ref>(pin,<sp/>\</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADC_bits)<sp/>/<sp/>1023.;</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Some_variable<sp/>=<sp/>Vout_normalized_analog_example<sp/>*<sp/>param1<sp/>/<sp/>param2;</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag){</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/>Some_variable<sp/>/=<sp/>2.;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="2748"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Some<sp/>variable<sp/>[units]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/>datafile.print(Some_variable);</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/>Serial.print(Some_variable);</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::sleepNow_nap()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>we<sp/>put<sp/>the<sp/>arduino<sp/>to<sp/>sleep<sp/>between<sp/>interrupt<sp/>readings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2767"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/>set_sleep_mode(SLEEP_MODE_STANDBY);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sleep<sp/>mode<sp/>is<sp/>set<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2769"><highlight class="normal"></highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/>cbi(ADCSRA,ADEN);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>switch<sp/>Analog<sp/>to<sp/>Digitalconverter<sp/>OFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/>sleep_enable();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enables<sp/>the<sp/>sleep<sp/>bit<sp/>in<sp/>the<sp/>mcucr<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>sleep<sp/>is<sp/>possible.<sp/>just<sp/>a<sp/>safety<sp/>pin<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/>sleep_mode();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>the<sp/>device<sp/>is<sp/>actually<sp/>put<sp/>to<sp/>sleep!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>THE<sp/>PROGRAM<sp/>CONTINUES<sp/>FROM<sp/>HERE<sp/>AFTER<sp/>WAKING<sp/>UP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>waking,<sp/>run<sp/>sleep<sp/>mode<sp/>function,<sp/>and<sp/>then<sp/>remainder<sp/>of<sp/>this<sp/>function<sp/>(below)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/>sleep_disable();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>thing<sp/>after<sp/>waking<sp/>from<sp/>sleep:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>sleep...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>detachInterrupt(1);<sp/>//<sp/>crude,<sp/>but<sp/>keeps<sp/>interrupts<sp/>from<sp/>clashing.<sp/>Need<sp/>to<sp/>improve<sp/>this<sp/>to<sp/>allow<sp/>both<sp/>measurements<sp/>types!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>06-11-2015:<sp/>The<sp/>above<sp/>line<sp/>commented<sp/>to<sp/>allow<sp/>the<sp/>rain<sp/>gage<sp/>to<sp/>be<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>the<sp/>same<sp/>time<sp/>as<sp/>other<sp/>readings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maybe<sp/>move<sp/>this<sp/>to<sp/>specific<sp/>post-wakeup<sp/>code?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Must<sp/>be<sp/>defined<sp/>outside<sp/>of<sp/>Logger<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_ISR_void(){</highlight></codeline>
<codeline lineno="2788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"></highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_anemometer_count_increment(){</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/>rotation_count<sp/>++;</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/>detachInterrupt(1);</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/>delay(20);<sp/></highlight><highlight class="comment">//<sp/>debounce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/>attachInterrupt(1,<sp/>_anemometer_count_increment,<sp/>FALLING);</highlight></codeline>
<codeline lineno="2795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a923b296832bd4222da649ebc66427ac1" kindref="member">Logger::HackHD</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>control_pin,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>want_camera_on){</highlight></codeline>
<codeline lineno="2871"><highlight class="comment">//void<sp/>Logger::HackHD(int<sp/>control_pin,<sp/>int<sp/>indicator_pin,<sp/>bool<sp/>want_camera_on){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Drop<sp/>control_pin<sp/>to<sp/>GND<sp/>to<sp/>turn<sp/>camera<sp/>on<sp/>or<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;Camera<sp/>is<sp/>on&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/>Serial.print(want_camera_on);</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>camera<sp/>on<sp/>or<sp/>off<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAMERA_IS_ON<sp/>!=<sp/>want_camera_on){</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/>pinMode(control_pin,<sp/>OUTPUT);</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/>digitalWrite(control_pin,<sp/>LOW);</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(200);</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/>pinMode(control_pin,<sp/>INPUT);</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/>digitalWrite(control_pin,<sp/>HIGH);</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/>CAMERA_IS_ON<sp/>=<sp/>1<sp/>-<sp/>CAMERA_IS_ON;<sp/></highlight><highlight class="comment">//<sp/>flips<sp/>it<sp/>from<sp/>true<sp/>to<sp/>false<sp/>and<sp/>vice<sp/>versa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>this<sp/>to<sp/>get<sp/>times<sp/>of<sp/>camera<sp/>on/off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/>start_logging_to_otherfile(</highlight><highlight class="stringliteral">&quot;camera.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/>now<sp/>=<sp/>RTC.now();</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/>otherfile.print(now.unixtime());</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/>otherfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"></highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(now.unixtime());</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(want_camera_on<sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(</highlight><highlight class="stringliteral">&quot;ON&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(want_camera_on<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>otherfile.print(</highlight><highlight class="stringliteral">&quot;OFF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/>end_logging_to_otherfile();</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>these<sp/>conditions<sp/>match<sp/>and<sp/>we<sp/>are<sp/>in<sp/>good<sp/>shape.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::TippingBucketRainGage(){</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/>detachInterrupt(1);</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/>pinMode(SDpowerPin,OUTPUT);<sp/></highlight><highlight class="comment">//<sp/>Seemed<sp/>to<sp/>have<sp/>forgotten<sp/>between<sp/>loops...<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>might<sp/>want<sp/>to<sp/>use<sp/>a<sp/>digitalread<sp/>for<sp/>better<sp/>incorporation<sp/>into<sp/>normal<sp/>logging<sp/>cycle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//SDpowerOn();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Callback<sp/>to<sp/>set<sp/>date<sp/>and<sp/>time<sp/>in<sp/>SD<sp/>card<sp/>file<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Following:<sp/>https://forum.arduino.cc/index.php?topic=348562.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See:<sp/>https://github.com/NorthernWidget/Logger/issues/6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/>SdFile::dateTimeCallback(_internalDateTime);</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sd.begin(CSpin,<sp/>SPI_HALF_SPEED))<sp/>{</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>use<sp/>Serial.println:<sp/>don&apos;t<sp/>kill<sp/>batteries<sp/>by<sp/>aborting<sp/>code<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Error<sp/>initializing<sp/>SD<sp/>card<sp/>for<sp/>writing&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/>LEDwarn(40);</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/>delay(10);</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/>start_logging_to_otherfile(</highlight><highlight class="stringliteral">&quot;bucket_tips.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/>now<sp/>=<sp/>RTC.now();</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/>otherfile.print(now.unixtime());</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/>otherfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/>Serial.print(now.unixtime());</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/>end_logging_to_otherfile();</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>START<sp/>TEMPORARY<sp/>CODE<sp/>TO<sp/>NOTE<sp/>BUCKET<sp/>TIP<sp/>RESPONSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/>pinMode(LEDpin,<sp/>OUTPUT);</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/>digitalWrite(LEDpin,<sp/>HIGH);</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>END<sp/>TEMPORARY<sp/>CODE<sp/>TO<sp/>NOTE<sp/>BUCKET<sp/>TIP<sp/>RESPONSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Tip!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/>delay(50);<sp/></highlight><highlight class="comment">//<sp/>to<sp/>make<sp/>sure<sp/>tips<sp/>aren&apos;t<sp/>double-counted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>START<sp/>TEMPORARY<sp/>CODE<sp/>TO<sp/>NOTE<sp/>BUCKET<sp/>TIP<sp/>RESPONSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/>digitalWrite(LEDpin,<sp/>LOW);</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/>pinMode(LEDpin,<sp/>INPUT);</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>END<sp/>TEMPORARY<sp/>CODE<sp/>TO<sp/>NOTE<sp/>BUCKET<sp/>TIP<sp/>RESPONSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/>NEW_RAIN_BUCKET_TIP<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>flag<sp/>to<sp/>log<sp/>data<sp/>if<sp/>the<sp/>&quot;LOG_ALL_SENSORS_ON_BUCKET_TIP&quot;<sp/>flag<sp/>is<sp/>set<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;TRUE&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LOG_ALL_SENSORS_ON_BUCKET_TIP){</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/>IS_LOGGING<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//delay(2000);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/>attachInterrupt(1,<sp/>wakeUpNow_tip,<sp/>LOW);</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>based<sp/>on<sp/>whether<sp/>we<sp/>are<sp/>already<sp/>logging<sp/>or<sp/>if<sp/>we<sp/>are<sp/>supposed<sp/>to<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>logging<sp/>here,<sp/>we<sp/>can<sp/>continue<sp/>with<sp/>the<sp/>logging<sp/>process,<sp/>or<sp/>just<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>back<sp/>to<sp/>sleep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_use_sleep_mode){</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nested<sp/>recursion<sp/>to<sp/>next-level-up<sp/>function,<sp/>hopefully<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>chew<sp/>through<sp/>too<sp/>much<sp/>memory!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IS_LOGGING){</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLogger_1ad90ff8f29410f6b70cc6334391400a4e" kindref="member">sleep</ref>();</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::start_logging_to_datafile(){</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>the<sp/>file<sp/>for<sp/>writing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!datafile.open(datafilename,<sp/>O_WRITE<sp/>|<sp/>O_CREAT<sp/>|<sp/>O_AT_END))<sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;Opening<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(datafilename);</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>write<sp/>failed&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/>delay(10);</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2992"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::start_logging_to_headerfile(){</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>the<sp/>file<sp/>for<sp/>writing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!headerfile.open(</highlight><highlight class="stringliteral">&quot;header.txt&quot;</highlight><highlight class="normal">,<sp/>O_WRITE<sp/>|<sp/>O_CREAT<sp/>|<sp/>O_AT_END))<sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;Opening<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;header.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>write<sp/>failed&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/>delay(10);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"></highlight></codeline>
<codeline lineno="3004"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::start_logging_to_otherfile(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_filename){</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>the<sp/>file<sp/>for<sp/>write<sp/>at<sp/>end<sp/>like<sp/>the<sp/>Native<sp/>SD<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!otherfile.open(_filename,<sp/>O_WRITE<sp/>|<sp/>O_CREAT<sp/>|<sp/>O_AT_END))<sp/>{</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>use<sp/>Serial.println:<sp/>don&apos;t<sp/>kill<sp/>batteries<sp/>by<sp/>aborting<sp/>code<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;Opening<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(_filename);</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>write<sp/>failed&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(10);</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"></highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::end_logging_to_otherfile(){</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ends<sp/>line<sp/>and<sp/>closes<sp/>otherfile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copied<sp/>from<sp/>endLine<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/>otherfile.println();</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/>Serial.println();</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>close<sp/>the<sp/>file:<sp/>(This<sp/>does<sp/>the<sp/>actual<sp/>sync()<sp/>step<sp/>too<sp/>-<sp/>writes<sp/>buffer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/>otherfile.close();</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/>delay(10);</highlight></codeline>
<codeline lineno="3024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::end_logging_to_headerfile(){</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ends<sp/>line<sp/>and<sp/>closes<sp/>otherfile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copied<sp/>from<sp/>endLine<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/>headerfile.println();</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>close<sp/>the<sp/>file:<sp/>(This<sp/>does<sp/>the<sp/>actual<sp/>sync()<sp/>step<sp/>too<sp/>-<sp/>writes<sp/>buffer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/>headerfile.close();</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/>delay(10);</highlight></codeline>
<codeline lineno="3033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"></highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a40ae372dee7f672a6d6f33ab441e4da1" kindref="member">Logger::Decagon5TE</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>excitPin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataPin){</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/>SoftwareSerial<sp/>mySerial(excitPin,<sp/>dataPin);<sp/><sp/></highlight><highlight class="comment">//5tm&apos;s<sp/>red<sp/>wire<sp/>(serial<sp/>data<sp/>out)<sp/>connected<sp/>to<sp/>pin<sp/>5,<sp/>pin<sp/>6<sp/>goes<sp/>nowhere</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Epsilon_Raw,<sp/>Sigma_Raw,<sp/>T_Raw;<sp/><sp/><sp/></highlight><highlight class="comment">//temporary<sp/>integer<sp/>variables<sp/>to<sp/>store<sp/>the<sp/>3<sp/>parts<sp/>of<sp/>the<sp/>incoming<sp/>serial<sp/>stream<sp/>from<sp/>the<sp/>5TM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dataStream[14];<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Max<sp/>14<sp/>characters:<sp/>4x3<sp/>+<sp/>2<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startflag=1;</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endflag=0;</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startMillis;<sp/></highlight><highlight class="comment">//<sp/>same<sp/>comment<sp/>as<sp/>right<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elapsed<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>shouldn&apos;t<sp/>overflow<sp/>on<sp/>the<sp/>time<sp/>scales<sp/>I&apos;m<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(startflag){</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/>digitalWrite(excitPin,HIGH);</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(100);<sp/></highlight><highlight class="comment">//<sp/>max.<sp/>time<sp/>for<sp/>probe&apos;s<sp/>comms<sp/>to<sp/>start<sp/>up<sp/>(see<sp/>datasheet)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/>startMillis<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/>startflag=0;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(startMillis);</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>serial<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>standard<sp/>Decagon<sp/>DDI<sp/>Serial;<sp/>simpler<sp/>than<sp/>SDI-12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/>mySerial.begin(1200);<sp/></highlight><highlight class="comment">//<sp/>1200<sp/>bits<sp/>per<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>OK<sp/>if<sp/>it<sp/>takes<sp/>longer,<sp/>so<sp/>long<sp/>as<sp/>data<sp/>stream<sp/>is<sp/>continuous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>don&apos;t<sp/>break<sp/>out<sp/>of<sp/>inner<sp/>while<sp/>loop,<sp/>and<sp/>we<sp/>start<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>receiving<sp/>before<sp/>200<sp/>ms<sp/>is<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(elapsed<sp/>&lt;<sp/>200){</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/>elapsed<sp/>=<sp/>millis()<sp/>-<sp/>startMillis;</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;ms<sp/>elapsed<sp/>=<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(elapsed);</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>code<sp/>keeps<sp/>looping<sp/>until<sp/>incoming<sp/>serial<sp/>data<sp/>appears<sp/>on<sp/>the<sp/>mySerial<sp/>pin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mySerial.available())<sp/>{</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Serial.println(&quot;Getting<sp/>data:&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay(1);<sp/><sp/></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mySerial.available()<sp/>&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endflag=1;</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>mySerial.read();<sp/><sp/></highlight><highlight class="comment">//gets<sp/>one<sp/>byte<sp/>from<sp/>serial<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(c);</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((c&gt;=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>and<sp/>c&lt;=</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataStream[i]<sp/>=<sp/>c;<sp/></highlight><highlight class="comment">//makes<sp/>the<sp/>string<sp/>readString<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(endflag==1){</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"></highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/>digitalWrite(excitPin,LOW);</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(dataStream);</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/>endflag=0;</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Declare<sp/>to<sp/>make<sp/>C++<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Epsilon_a;</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>EC;</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T;</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"></highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>the<sp/>array<sp/>into<sp/>3<sp/>integers<sp/><sp/>(for<sp/>the<sp/>5TM,<sp/>y<sp/>is<sp/>always<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/>sscanf<sp/>(dataStream,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>&amp;Epsilon_Raw,<sp/>&amp;Sigma_Raw,<sp/>&amp;T_Raw);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3121"><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>measured<sp/>values<sp/>into<sp/>real<sp/>values,<sp/>via<sp/>equations<sp/>in<sp/>Decagon<sp/>5TE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>manual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3124"><highlight class="normal"></highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dielectric<sp/>permittivity<sp/>[-unitless-]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Epsilon_Raw<sp/>==<sp/>4095){</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>alert!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//delete<sp/>Epsilon_a;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>Epsilon_a[6]<sp/>=<sp/>&quot;ERROR&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Epsilon_a<sp/>=<sp/>-9999;</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Epsilon_a<sp/>=<sp/>Epsilon_Raw/50.;</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Electrical<sp/>Conductivity<sp/>[dS/m]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Sigma_Raw<sp/>==<sp/>1023){</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>alert!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>EC[6]<sp/>=<sp/>&quot;ERROR&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EC<sp/>=<sp/>-9999;</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Sigma_Raw<sp/>&lt;=<sp/>700){</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EC<sp/>=<sp/>Sigma_Raw/100.;</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(i.e.<sp/>Sigma_Raw<sp/>&gt;<sp/>700,<sp/>but<sp/>no<sp/>elif<sp/>needed<sp/>so<sp/>long<sp/>as<sp/>input<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parses<sp/>correctly...<sp/>hmm,<sp/>should<sp/>maybe<sp/>protect<sp/>against<sp/>that)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EC<sp/>=<sp/>(700.<sp/>+<sp/>5.*(Sigma_Raw-<sp/>700.))/100.;</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Temperature<sp/>[degrees<sp/>C]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Combined<sp/>both<sp/>steps<sp/>of<sp/>the<sp/>operation<sp/>as<sp/>given<sp/>in<sp/>the<sp/>manual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(T_Raw<sp/>==<sp/>1023){</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>alert!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>char<sp/>T[6]<sp/>=<sp/>&quot;ERROR&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>=<sp/>-9999;</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(T_Raw<sp/>&lt;=<sp/>900){</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>=<sp/>(T_Raw<sp/>-<sp/>400.)<sp/>/<sp/>10.;</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(i.e.<sp/>T_Raw<sp/>&gt;<sp/>900,<sp/>but<sp/>no<sp/>elif<sp/>needed<sp/>so<sp/>long<sp/>as<sp/>input<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parses<sp/>correctly...<sp/>hmm,<sp/>should<sp/>maybe<sp/>protect<sp/>against<sp/>that)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>=<sp/>((900.<sp/>+<sp/>5.*(T_Raw-900.)<sp/>-<sp/>400.))<sp/>/<sp/>10.;</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="3168"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Dielectric<sp/>permittivity<sp/>[-]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Electrical<sp/>Conductivity<sp/>[dS/m]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Temperature<sp/>[degrees<sp/>C]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/>datafile.print(Epsilon_a);</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/>datafile.print(EC);</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/>datafile.print(T);</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(Epsilon_a);</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(EC);</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(T);</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a84da6a9ec3d4d56fdc32d950b71f1a26" kindref="member">Logger::DecagonGS1</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Vref,<sp/>uint8_t<sp/>ADC_resolution_nbits){</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Vref<sp/>in<sp/>volts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_ADC;</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>voltage;</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>volumetric_water_content;</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/>_ADC<sp/>=<sp/><ref refid="classLogger_1ad8296890a14a0df83c2433a20f25b899" kindref="member">analogReadOversample</ref>(pin,<sp/>ADC_resolution_nbits);</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/>voltage<sp/>=<sp/>Vref<sp/>*<sp/>_ADC<sp/>/<sp/>1023.;</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Standard<sp/>Decagon<sp/>equation<sp/>--<sp/>linear,<sp/>for<sp/>up<sp/>to<sp/>60%<sp/>VWC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Decagon<sp/>sensor<sp/>returns<sp/>the<sp/>same<sp/>value<sp/>of<sp/>voltage<sp/>regardless<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>main<sp/>power<sp/>voltage<sp/>(3<sp/>to<sp/>15<sp/>V<sp/>allowed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/>volumetric_water_content<sp/>=<sp/>0.494<sp/>*<sp/>voltage<sp/>-<sp/>0.554;</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="3234"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Voltage<sp/>[V]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Volumentric<sp/>water<sp/>content<sp/>[-]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/>datafile.print(voltage,<sp/>4);</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/>datafile.print(volumetric_water_content,<sp/>4);</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/>Serial.print(voltage,<sp/>4);</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/>Serial.print(volumetric_water_content,<sp/>4);</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"></highlight></codeline>
<codeline lineno="3255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"></highlight></codeline>
<codeline lineno="3257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Honeywell_HSC_analog</highlight></codeline>
<codeline lineno="3259"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3260"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a9808967fdf91f10602aa883df35145b3" kindref="member">Logger::Honeywell_HSC_analog</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Vsupply,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Vref,<sp/>\</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Pmin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Pmax,<sp/>\</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TransferFunction_number,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>units,<sp/>\</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ADC_resolution_nbits){</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>pin<sp/>voltage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reading<sp/>=<sp/><ref refid="classLogger_1ad8296890a14a0df83c2433a20f25b899" kindref="member">analogReadOversample</ref>(pin,<sp/>ADC_resolution_nbits);</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Vout<sp/>=<sp/>reading/1023*Vref;</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>transfer<sp/>function<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>P;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(TransferFunction_number<sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/>P<sp/>=<sp/>(Vout<sp/>-<sp/>0.1*Vsupply)<sp/>*<sp/>((Pmax-Pmin)/(0.8*Vsupply))<sp/>+<sp/>Pmin;</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(TransferFunction_number<sp/>==<sp/>2){</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/>P<sp/>=<sp/>(Vout<sp/>-<sp/>0.05*Vsupply)<sp/>*<sp/>((Pmax-Pmin)/(0.9*Vsupply))<sp/>+<sp/>Pmin;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(TransferFunction_number<sp/>==<sp/>3){</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/>P<sp/>=<sp/>(Vout<sp/>-<sp/>0.05*Vsupply)<sp/>*<sp/>((Pmax-Pmin)/(0.8*Vsupply))<sp/>+<sp/>Pmin;</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(TransferFunction_number<sp/>==<sp/>4){</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/>P<sp/>=<sp/>(Vout<sp/>-<sp/>0.04*Vsupply)<sp/>*<sp/>((Pmax-Pmin)/(0.9*Vsupply))<sp/>+<sp/>Pmin;</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"></highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_units[]={</highlight><highlight class="stringliteral">&quot;mbar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Pa&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;KPa&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Mpa&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;inH2O&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PSI&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;why&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="3344"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Pressure<sp/>[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(_units[units]);</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/>datafile.print(P,<sp/>4);</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//datafile.print(F(&quot;<sp/>&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//datafile.print(_units[units]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/>Serial.print(P,<sp/>4);</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Serial.print(F(&quot;<sp/>&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Serial.print(_units[units]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"></highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>P;</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"></highlight></codeline>
<codeline lineno="3369"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1ab1ae31b2bdb77c86fb6851907258171b" kindref="member">Logger::vdivR</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Rref,<sp/>uint8_t<sp/>ADC_resolution_nbits,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Rref_on_GND_side){</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_R<sp/>=<sp/>_vdivR(pin,<sp/>Rref,<sp/>ADC_resolution_nbits,<sp/>Rref_on_GND_side);</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"></highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="3401"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Resistance<sp/>[Ohms]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"></highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/>datafile.print(_R);</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/>Serial.print(_R);</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"></highlight></codeline>
<codeline lineno="3416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"></highlight></codeline>
<codeline lineno="3418"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3419"><highlight class="comment">SENSOR<sp/>DOES<sp/>NOT<sp/>STABILIZE<sp/>(FLEXFORCE<sp/>SENSOR)</highlight></codeline>
<codeline lineno="3420"><highlight class="comment">void<sp/>Logger::flex(int<sp/>flexPin,<sp/>float<sp/>Rref,<sp/>float<sp/>calib1,<sp/>float<sp/>calib2){</highlight></codeline>
<codeline lineno="3421"><highlight class="comment"><sp/><sp/>float<sp/>_Rflex<sp/>=<sp/>_vdivR(flexPin,<sp/>Rref);</highlight></codeline>
<codeline lineno="3422"><highlight class="comment"><sp/><sp/>//<sp/>FINISH<sp/>WRITING<sp/>CODE</highlight></codeline>
<codeline lineno="3423"><highlight class="comment">}</highlight></codeline>
<codeline lineno="3424"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3425"><highlight class="normal"></highlight></codeline>
<codeline lineno="3426"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLogger_1a95670d06ec3b68300895cd7bf8c37999" kindref="member">Logger::linearPotentiometer</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linpotPin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Rref,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>slope,<sp/>\</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_distance_units,<sp/>\</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>intercept,<sp/>\</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ADC_resolution_nbits,<sp/>\</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Rref_on_GND_side){</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_Rpot<sp/>=<sp/>_vdivR(linpotPin,<sp/>Rref,<sp/>ADC_resolution_nbits,<sp/>Rref_on_GND_side);</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_dist<sp/>=<sp/>slope*_Rpot<sp/>+<sp/>intercept;</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SAVE<sp/>DATA<sp/>//</highlight></codeline>
<codeline lineno="3479"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_log_after_booting_up){</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;Distance<sp/>[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(_distance_units);</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.print(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/>headerfile.sync();</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"></highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SD<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/>datafile.print(_dist);</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/>datafile.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>to<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/>Serial.print(_dist);</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"></highlight></codeline>
<codeline lineno="3496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"></highlight></codeline>
<codeline lineno="3498"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="Logger_8cpp_1a144189fccfe80979cc2fcafefdf2728a" kindref="member">save_Aref</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_V){</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/>EEPROM.put(4,<sp/>_V);</highlight></codeline>
<codeline lineno="3522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"></highlight></codeline>
<codeline lineno="3524"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="Logger_8cpp_1ae9bf4d0d2809a902be80dbf825844636" kindref="member">read_Aref</ref>(){</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_V;</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/>EEPROM.get(4,<sp/>_V);</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_V;<sp/></highlight></codeline>
<codeline lineno="3544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"></highlight></codeline>
<codeline lineno="3546"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NEW<sp/>STUFF:<sp/>(MAINLY)<sp/>INTERNAL<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3547"><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::name(){</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Self-identify<sp/>before<sp/>talking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/>Serial.print(logger_name);</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;&gt;:<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"></highlight></codeline>
<codeline lineno="3555"><highlight class="normal"></highlight></codeline>
<codeline lineno="3556"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::print_time(){</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>exit_flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>computer<sp/>to<sp/>tell<sp/>logger<sp/>to<sp/>start<sp/>sending<sp/>its<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>go;</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>exit_flag<sp/>){</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/>go<sp/>=<sp/>Serial.read();</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(go<sp/>==<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>exit_flag<sp/>){</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit_flag<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Exit<sp/>loop<sp/>once<sp/>this<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>wait<sp/>until<sp/>we<sp/>are<sp/>at<sp/>the<sp/>top<sp/>of<sp/>the<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>now<sp/>=<sp/>RTC.now();</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>unixtimenow<sp/>=<sp/>now.unixtime();</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(now.unixtime()<sp/>==<sp/>unixtimenow){</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>now<sp/>=<sp/>RTC.now();</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>times<sp/>before<sp/>setting<sp/>clock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;5;<sp/>i++){</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>now<sp/>=<sp/>RTC.now();</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(now.unixtime());</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i&lt;4<sp/>){</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>delay<sp/>on<sp/>the<sp/>last<sp/>time<sp/>through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay(1000);</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>end<sp/>of<sp/>the<sp/>while<sp/>loop<sp/>for<sp/>clock<sp/>setting<sp/>and<sp/>passing<sp/>the<sp/>old</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>over<sp/>to<sp/>the<sp/>computer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"></highlight></codeline>
<codeline lineno="3584"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::set_time_main(){</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>set<sp/>clock<sp/>and<sp/>returns<sp/>5<sp/>more<sp/>times<sp/>as<sp/>part<sp/>of<sp/>that<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>thing<sp/>coming<sp/>in<sp/>should<sp/>be<sp/>the<sp/>time<sp/>from<sp/>the<sp/>computer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>exit_flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>exit_flag<sp/>){</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Serial.available()<sp/>){</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clockSet();</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit_flag<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Totally<sp/>out<sp/>of<sp/>loop<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"></highlight></codeline>
<codeline lineno="3596"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::announce_start(){</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/>Serial.println();</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/>name();</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>this<sp/>logger&apos;s<sp/>name.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/>Serial.println();</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/>delay(100);</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/>Serial.println(\</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/>F(</highlight><highlight class="stringliteral">&quot;**********************<sp/>Logger<sp/>initializing.<sp/>**********************&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"></highlight></codeline>
<codeline lineno="3606"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Handshake<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3607"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::establishContact_Tx(){</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Serial.available()<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>a<sp/>capital<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(300);</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"></highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Logger::establishContact_Rx(){</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>in;</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setclock<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/>in<sp/>=<sp/>Serial.read();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>a<sp/>capital<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in<sp/>==<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;ALog&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/>setclock<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setclock;</highlight></codeline>
<codeline lineno="3623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"></highlight></codeline>
<codeline lineno="3625"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::startup_sequence(){</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>on<sp/>power<sp/>to<sp/>all<sp/>sensors:<sp/>important<sp/>for<sp/>I2C<sp/>sensors<sp/>that<sp/>may<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>power<sp/>to<sp/>not<sp/>pull<sp/>on<sp/>clock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/>pinMode(SensorPowerPin,<sp/>OUTPUT);</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/>digitalWrite(SensorPowerPin,<sp/>HIGH);</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>connected_to_computer<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//char<sp/>handshake[4];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//char<sp/>handshake_test[5]<sp/>=<sp/>&quot;alog&quot;;<sp/>//<sp/>5<sp/>chars,<sp/>incl.<sp/>termination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>ntrue<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>unixtime_at_start;</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>throw<sp/>away<sp/>any<sp/>garbage<sp/>on<sp/>the<sp/>incoming<sp/>Serial<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(Serial.available()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.read();</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>check<sp/>if<sp/>connected<sp/>to<sp/>computer<sp/>with<sp/>ALogTalk<sp/>running<sp/>to<sp/>set<sp/>the<sp/>clock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>so<sp/>by<sp/>first<sp/>pinging<sp/>the<sp/>computer,<sp/>and<sp/>then<sp/>waiting<sp/>for<sp/>a<sp/>handshake.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>millisthen<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(millis()<sp/>-<sp/>millisthen)<sp/>&lt;<sp/>2000<sp/>&amp;&amp;<sp/>(connected_to_computer<sp/>==<sp/>0)){</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/>connected_to_computer<sp/>=<sp/>establishContact_Rx();</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Serial<sp/>is<sp/>available<sp/>if<sp/>establishContact<sp/>exits<sp/>on<sp/>its<sp/>own</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3649"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(<sp/>Serial.available()<sp/>){</highlight></codeline>
<codeline lineno="3650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>while(<sp/>Serial.available()<sp/>&amp;&amp;<sp/>(i<sp/>&lt;<sp/>4)){</highlight></codeline>
<codeline lineno="3652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handshake[i]<sp/>=<sp/>Serial.read();</highlight></codeline>
<codeline lineno="3653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="3654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3655"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i=0;<sp/>i&lt;4;<sp/>i++){</highlight></codeline>
<codeline lineno="3656"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(handshake[i]<sp/>==<sp/>handshake_test[i]){</highlight></codeline>
<codeline lineno="3657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ntrue++;</highlight></codeline>
<codeline lineno="3658"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3659"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3660"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ntrue<sp/>==<sp/>4){</highlight></codeline>
<codeline lineno="3661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connected_to_computer<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="3662"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3663"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3664"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>through<sp/>startup<sp/>sequence,<sp/>including<sp/>clock<sp/>setting<sp/>if<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>connected_to_computer<sp/>is<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/>name();</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;HELLO,<sp/>COMPUTER.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/>delay(50);</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(<sp/>Serial.available()<sp/>){<sp/>//<sp/>To<sp/>allow<sp/>clock<sp/>setting,<sp/>uncomment<sp/>this<sp/>and<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>comment<sp/>the<sp/>above<sp/>section<sp/>that<sp/>sets<sp/>&quot;connected_to_computer&quot;...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>is,<sp/>unless<sp/>you<sp/>can<sp/>make<sp/>the<sp/>handshake<sp/>work!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>connected_to_computer<sp/>){</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/>wdt_disable();</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(1000);<sp/></highlight><highlight class="comment">//<sp/>Give<sp/>Python<sp/>time<sp/>to<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/>name();</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;LOGGING<sp/>TO<sp/>FILE<sp/>[&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(datafilename);</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(1500);</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/>name();</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;UNIX<sp/>TIME<sp/>STAMP<sp/>ON<sp/>MY<sp/>WATCH<sp/>IS:<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/>now<sp/>=<sp/>RTC.now();</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/>unixtime_at_start<sp/>=<sp/>now.unixtime();</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(unixtime_at_start);</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(1500);</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(unixtime_at_start<sp/>&lt;<sp/>1000000000){</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name();</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Uh-oh:<sp/>that<sp/>doesn&apos;t<sp/>sound<sp/>right!<sp/>Clock<sp/>reset<sp/>to<sp/>1/1/2000?&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEDtimeWrong(3);</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>print_time();</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_time_main();</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delay(2000);</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name();</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Thanks,<sp/>computer!<sp/>I<sp/>think<sp/>I&apos;m<sp/>all<sp/>set<sp/>now.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name();</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Serial.println(F(&quot;Clock<sp/>is<sp/>probably<sp/>fine&quot;));</highlight></codeline>
<codeline lineno="3703"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;How<sp/>does<sp/>that<sp/>compare<sp/>to<sp/>you,<sp/>computer?&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delay(1500);</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>print_time();</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delay(1500);</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name();</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Would<sp/>you<sp/>like<sp/>to<sp/>set<sp/>the<sp/>logger&apos;s<sp/>clock<sp/>\</highlight></codeline>
<codeline lineno="3709"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>the<sp/>computer&apos;s<sp/>time?<sp/>(y/n)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>waiting<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>yn;</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>waiting<sp/>){</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Serial.available()<sp/>){</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yn<sp/>=<sp/>Serial.read();</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>yn<sp/>==<sp/></highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal"><sp/>||<sp/>yn<sp/>==<sp/></highlight><highlight class="charliteral">&apos;Y&apos;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waiting<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_time_main();</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>yn<sp/>==<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal"><sp/>||<sp/>yn<sp/>==<sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waiting<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name();</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Not<sp/>selecting<sp/>time;<sp/>continuing.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay(1500);</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name();</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Please<sp/>select<sp/>&lt;y&gt;<sp/>or<sp/>&lt;n&gt;.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>serial;<sp/>just<sp/>blink</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/>now<sp/>=<sp/>RTC.now();</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/>unixtime_at_start<sp/>=<sp/>now.unixtime();</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>Serial<sp/>just<sp/>in<sp/>case<sp/>computer<sp/>is<sp/>connected<sp/>w/out<sp/>Python<sp/>terminal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;Current<sp/>UNIX<sp/>time<sp/>stamp<sp/>according<sp/>to<sp/>logger<sp/>is:<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(unixtime_at_start);</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(unixtime_at_start<sp/>&lt;<sp/>1000000000){</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEDtimeWrong(3);</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>connected_to_computer<sp/>){</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(1500);</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/>name();</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Now<sp/>beginning<sp/>to<sp/>log.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(1000);</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/>digitalWrite(SensorPowerPin,<sp/>LOW);</highlight></codeline>
<codeline lineno="3753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"></highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::clockSet(){</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"></highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/>byte<sp/>Year;</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/>byte<sp/>Month;</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/>byte<sp/>Date;</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/>byte<sp/>DoW;</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/>byte<sp/>Hour;</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/>byte<sp/>Minute;</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/>byte<sp/>Second;</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"></highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/>DateTime<sp/>nowPreSet<sp/>=<sp/>RTC.now();</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"></highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/>GetDateStuff(Year,<sp/>Month,<sp/>Date,<sp/>DoW,<sp/>Hour,<sp/>Minute,<sp/>Second);</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"></highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/>Clock.setClockMode(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>to<sp/>24h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//setClockMode(true);<sp/><sp/><sp/>//<sp/>set<sp/>to<sp/>12h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"></highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/>Clock.setYear(Year);</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/>Clock.setMonth(Month);</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/>Clock.setDate(Date);</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/>Clock.setDoW(DoW);</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/>Clock.setHour(Hour);</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/>Clock.setMinute(Minute);</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/>Clock.setSecond(Second);</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Give<sp/>time<sp/>at<sp/>next<sp/>five<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>use<sp/>a<sp/>DateTime<sp/>object<sp/>for<sp/>this,<sp/>b/c<sp/>rollover<sp/>is<sp/>a<sp/>potential</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>problem,<sp/>but<sp/>this<sp/>display<sp/>is<sp/>not<sp/>mission-critical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;5;<sp/>i++){</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay(1000);</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>now<sp/>=<sp/>RTC.now();</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(now.year(),<sp/>DEC);</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(now.month(),<sp/>DEC);</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(now.day(),<sp/>DEC);</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(now.hour(),<sp/>DEC);<sp/></highlight><highlight class="comment">//24-hr<sp/>(should<sp/>be)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(now.minute(),<sp/>DEC);</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(now.second(),<sp/>DEC);</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/>delay(1000);</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>unixtime_at_receive_string<sp/>=<sp/>nowPreSet.unixtime();</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;Logger&apos;s<sp/>UNIX<sp/>time<sp/>at<sp/>which<sp/>it<sp/>received<sp/>the<sp/>new<sp/>time<sp/>string:<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/>Serial.println(unixtime_at_receive_string);</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;Clock<sp/>set!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"></highlight></codeline>
<codeline lineno="3806"><highlight class="normal"></highlight></codeline>
<codeline lineno="3807"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Logger::GetDateStuff(byte&amp;<sp/>Year,<sp/>byte&amp;<sp/>Month,<sp/>byte&amp;<sp/>Day,<sp/>byte&amp;<sp/>DoW,<sp/></highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte&amp;<sp/>Hour,<sp/>byte&amp;<sp/>Minute,<sp/>byte&amp;<sp/>Second)<sp/>{</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>this<sp/>if<sp/>you<sp/>notice<sp/>something<sp/>coming<sp/>in<sp/>on<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>serial<sp/>port.<sp/>The<sp/>stuff<sp/>coming<sp/>in<sp/>should<sp/>be<sp/>in<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>order<sp/>YYMMDDwHHMMSS,<sp/>with<sp/>an<sp/>&apos;x&apos;<sp/>at<sp/>the<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>GotString<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>InChar;</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>Temp1,<sp/>Temp2;</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>InString[20];</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"></highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>j=0;</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!GotString)<sp/>{</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Serial.available())<sp/>{</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InChar<sp/>=<sp/>Serial.read();</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InString[j]<sp/>=<sp/>InChar;</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InChar<sp/>==<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GotString<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(InString);</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>Year<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/>Temp1<sp/>=<sp/>(byte)InString[0]<sp/>-48;</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/>Temp2<sp/>=<sp/>(byte)InString[1]<sp/>-48;</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/>Year<sp/>=<sp/>Temp1*10<sp/>+<sp/>Temp2;</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>month</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/>Temp1<sp/>=<sp/>(byte)InString[2]<sp/>-48;</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/>Temp2<sp/>=<sp/>(byte)InString[3]<sp/>-48;</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/>Month<sp/>=<sp/>Temp1*10<sp/>+<sp/>Temp2;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>date</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/>Temp1<sp/>=<sp/>(byte)InString[4]<sp/>-48;</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/>Temp2<sp/>=<sp/>(byte)InString[5]<sp/>-48;</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/>Day<sp/>=<sp/>Temp1*10<sp/>+<sp/>Temp2;</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>Day<sp/>of<sp/>Week</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/>DoW<sp/>=<sp/>(byte)InString[6]<sp/>-<sp/>48;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>Hour</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/>Temp1<sp/>=<sp/>(byte)InString[7]<sp/>-48;</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/>Temp2<sp/>=<sp/>(byte)InString[8]<sp/>-48;</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/>Hour<sp/>=<sp/>Temp1*10<sp/>+<sp/>Temp2;</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>Minute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/>Temp1<sp/>=<sp/>(byte)InString[9]<sp/>-48;</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/>Temp2<sp/>=<sp/>(byte)InString[10]<sp/>-48;</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/>Minute<sp/>=<sp/>Temp1*10<sp/>+<sp/>Temp2;</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>Second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/>Temp1<sp/>=<sp/>(byte)InString[11]<sp/>-48;</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/>Temp2<sp/>=<sp/>(byte)InString[12]<sp/>-48;</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/>Second<sp/>=<sp/>Temp1*10<sp/>+<sp/>Temp2;</highlight></codeline>
<codeline lineno="3855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="comment">//<sp/>Non-class<sp/>function<sp/>//</highlight></codeline>
<codeline lineno="3860"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3861"><highlight class="normal"></highlight><highlight class="comment">//<sp/>call<sp/>back<sp/>for<sp/>file<sp/>timestamps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3862"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>https://forum.arduino.cc/index.php?topic=72739.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>https://forum.arduino.cc/index.php?topic=348562.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3864"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_internalDateTime(uint16_t*<sp/>date,<sp/>uint16_t*<sp/>time)<sp/>{</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/>DateTime<sp/>now<sp/>=<sp/>RTC.now();</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>date<sp/>using<sp/>FAT_DATE<sp/>macro<sp/>to<sp/>format<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/>*date<sp/>=<sp/>FAT_DATE(now.year(),<sp/>now.month(),<sp/>now.day());</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>time<sp/>using<sp/>FAT_TIME<sp/>macro<sp/>to<sp/>format<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/>*time<sp/>=<sp/>FAT_TIME(now.hour(),<sp/>now.minute(),<sp/>now.second());</highlight></codeline>
<codeline lineno="3870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Logger.cpp"/>
  </compounddef>
</doxygen>
